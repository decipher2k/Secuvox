{"version":3,"sources":["webpack://@cleverpush/cleverpush-js-sdk/./node_modules/@babel/runtime/helpers/esm/get.js","webpack://@cleverpush/cleverpush-js-sdk/./node_modules/@babel/runtime/helpers/esm/superPropBase.js","webpack://@cleverpush/cleverpush-js-sdk/./src/error/SubscribingInProgressError.js","webpack://@cleverpush/cleverpush-js-sdk/./src/subscription/httpsManager.js","webpack://@cleverpush/cleverpush-js-sdk/./src/utils/imported.js"],"names":["_get","Reflect","get","target","property","receiver","base","desc","Object","getOwnPropertyDescriptor","call","arguments","length","value","apply","this","_superPropBase","object","prototype","hasOwnProperty","SubscribingInProgressError","CleverPushError","HttpsSubscriptionManager","config","api","triggerEvent","addControllerChangeListener","isSubscribed","then","subscribed","storageManager","initDb","isUnregisteringWorker","loadIframe","subdomain","origin","cleverpushDomain","iframeContainer","document","createElement","style","display","body","appendChild","Penpal","log","connection","url","encodeURIComponent","location","appendTo","timeout","iframe","promise","child","iframeMessenger","setConfig","Event","catch","err","navigator","permissions","browser","browserVersion","query","name","permissionStatus","onchange","isSubscribing","window","Notification","permission","unsubscribe","enabled","notManually","getSubscriptionId","iframeSubscriptionId","controllerChangeListenerAdded","serviceWorker","getWorkerScope","addEventListener","event","unsetSynced","e","Promise","resolve","controller","scriptURL","includes","getWorkerPath","ready","registration","setTimeout","unregister","unregistered","env","syncAndResolve","checkingIfShouldSync","checkIfShouldSync","shouldSync","sync","resubscribe","isReSubscribe","canSubscribe","storageStatus","SUBSCRIPTION_STATUS","showConfirmAlert","registerWorker","serviceWorkerRegistration","pushManagerSubscribe","subscription","isSubscribedHttps","getActiveWorkerRegistration","pushManager","getSubscription","tryWorkerUpdate","showConfirmAlertResubscribe","replaceRootWorker","autoRegister","isRetry","reject","subscribe","getPushManagerSubscribeOptions","unregisterOtherPushSubscriptions","message","indexOf","migratedSubscription","alertHoursDeny","localStorage","getItem","sessionStorage","showUnblockTutorial","canSubscribeHttpsReal","canSubscribeHttps","importedSubscriptionsProvider","importedSubscriptionsSubdomain","isSubscribedAccengage","result","reason","storedSubId","subscriptionId","setAllowed","topics","confirmAlertNativeTheme","confirm","hasTopicCheckboxes","setTopics","getSelectedTopics","alreadySubscribed","requestPermission","registerForPushLater","setPending","registerForPush","hideBackdrop","confirmAlertSelectTopicsLater","channelTopics","confirmAlertHideChannelTopics","appendConfirmBox","confirmAlertSelectTopicsLaterTheme","confirmAlertSubscribeLater","setClosed","setTempBlocked","confirmAlertDenied","setDenied","translate","formatCleverPush","confirmAlertShown","getTopics","subscribeForce","id","setClickedNotification","milliseconds","getClickedNotification","idFromIframe","SubscriptionManager","messageListener","console","data","type","removeEventListener","JSON","parse","isOptin","querySelector","contentWindow","postMessage","topic","src","border","onload","onerror"],"mappings":"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","file":"chunk/115.45e07019e1b45bb84052.js","sourcesContent":["import superPropBase from \"./superPropBase.js\";\nexport default function _get() {\n  if (typeof Reflect !== \"undefined\" && Reflect.get) {\n    _get = Reflect.get;\n  } else {\n    _get = function _get(target, property, receiver) {\n      var base = superPropBase(target, property);\n      if (!base) return;\n      var desc = Object.getOwnPropertyDescriptor(base, property);\n\n      if (desc.get) {\n        return desc.get.call(arguments.length < 3 ? target : receiver);\n      }\n\n      return desc.value;\n    };\n  }\n\n  return _get.apply(this, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nexport default function _superPropBase(object, property) {\n  while (!Object.prototype.hasOwnProperty.call(object, property)) {\n    object = getPrototypeOf(object);\n    if (object === null) break;\n  }\n\n  return object;\n}","import CleverPushError from './CleverPushError';\n\nexport default class SubscribingInProgressError extends CleverPushError {}\n","import Penpal from '../utils/penpal';\nimport SubscriptionManager from './manager';\nimport { log } from '../utils/debug';\nimport SubscribingInProgressError from '../error/SubscribingInProgressError';\nimport CleverPushError from '../error/CleverPushError';\nimport Event from '../const/event';\nimport { translate } from '../utils/translate';\nimport {\n  browser,\n  browserVersion\n} from '../utils/env';\nimport { isSubscribedAccengage } from '../utils/imported';\nimport { SUBSCRIPTION_STATUS } from '../const/common';\n\nconst UNREGISTERING_WORKER_TIMEOUT = 1000 * 60;\n\nexport default class HttpsSubscriptionManager extends SubscriptionManager {\n  constructor(config, api, triggerEvent) {\n    super(config, api, triggerEvent);\n\n    this.addControllerChangeListener();\n\n    this.isSubscribed().then((subscribed) => {\n      if (subscribed) {\n        this.storageManager.initDb();\n      }\n    });\n\n    this.isUnregisteringWorker = false;\n\n    // we need to use iframes for people who switch from subdomain to domain mode\n    // maybe we don't want to load this for people who denied push or are subscribed directly via the domain\n\n    // iframe loading can be disable via config (e.g. if we want to use notifications on .cleverpush.com subdomain like demo.cleverpush.com)\n\n    if (config.loadIframe && this.config.subdomain) {\n      const origin = `https://${this.config.subdomain}.${this.config.cleverpushDomain || 'cleverpush.com'}`;\n\n      const iframeContainer = document.createElement('div');\n      iframeContainer.style.display = 'none';\n      document.body.appendChild(iframeContainer);\n\n      Penpal.debug = log.getLevel() < 2;\n      const connection = Penpal.connectToChild({\n        url: `${origin}/iframe?origin=${encodeURIComponent(location.origin)}`,\n        appendTo: iframeContainer,\n        timeout: 20 * 1000\n      });\n\n      connection.iframe.style.display = 'none';\n\n      connection.promise.then((child) => {\n        log.debug('child ready', child);\n        this.iframeMessenger = child;\n\n        child.setConfig(this.config).then(() => {\n          /*\n            child.getStorage().then((storageItems) => {\n            const storageKeys = Object.keys(storageItems);\n            localStorage.\n            });\n           */\n          this.triggerEvent(Event.INITIALIZED);\n        });\n      }).catch((err) => {\n        log.debug('iFrame connection error', err);\n        this.triggerEvent(Event.INITIALIZED);\n      });\n    } else {\n      this.triggerEvent(Event.INITIALIZED);\n    }\n\n    // unsubscribe if permission is set to default or denied\n    if (navigator.permissions && !(browser.name === 'Firefox' && browserVersion < 46)) {\n      navigator.permissions.query({ name: 'notifications' }).then((permissionStatus) => {\n        permissionStatus.onchange = () => {\n          if (this.isSubscribing) {\n            return;\n          }\n          if (window.Notification.permission !== 'granted') {\n            // send \"notManually: true\" parameter so we can get re-prompted directly on next visit\n            this.unsubscribe(true);\n            return;\n          }\n          if (window.Notification.permission === 'denied') {\n            this.unsubscribe();\n          } else {\n            this.isSubscribed().then((enabled) => {\n              if (!enabled) {\n                this.triggerEvent(Event.PERMISSION_RE_GRANTED);\n              }\n            });\n          }\n        };\n      });\n    }\n  }\n\n  unsubscribe(notManually) {\n    if (this.iframeMessenger) {\n      return this.iframeMessenger.getSubscriptionId().then((iframeSubscriptionId) =>\n        // use 'notManually': true on iframe to prevent 'status' to be 'unsubscribed' on subdomain (only for https sites)\n        this.iframeMessenger.unsubscribe(true).then(() => super.unsubscribe(notManually, iframeSubscriptionId)));\n    }\n\n    return super.unsubscribe(notManually);\n  }\n\n  isSubscribedViaSubdomain() {\n    // TODO: implement & use\n    return true;\n  }\n\n  addControllerChangeListener() {\n    try {\n      if (this.controllerChangeListenerAdded) {\n        return;\n      }\n      this.controllerChangeListenerAdded = true;\n\n      if (\n        window.Notification.permission === 'granted'\n        && navigator.serviceWorker\n        && this.getWorkerScope() === '/'\n      ) {\n        navigator.serviceWorker.addEventListener('controllerchange', (event) => {\n          log.debug('controllerchange', event);\n          // call isSubscribed to automatically trigger re-subscribe\n          this.storageManager.unsetSynced();\n          this.isSubscribed();\n        });\n      }\n    } catch (e) {\n      log.error('addControllerChangeListener failed', e);\n    }\n  }\n\n  replaceRootWorker() {\n    return new Promise((resolve) => {\n      if (\n        window.Notification.permission === 'granted'\n        && navigator.serviceWorker\n        && this.getWorkerScope() === '/'\n        && navigator.serviceWorker.controller\n        && !navigator.serviceWorker.controller.scriptURL?.includes(this.getWorkerPath())\n      ) {\n        log.debug('replacing root service worker...');\n        navigator.serviceWorker.ready.then((registration) => {\n          if (this.isUnregisteringWorker) {\n            log.debug('already replacing root worker');\n            resolve();\n            return;\n          }\n\n          this.isUnregisteringWorker = true;\n          setTimeout(() => {\n            this.isUnregisteringWorker = false;\n          }, UNREGISTERING_WORKER_TIMEOUT);\n\n          registration.unregister().then((unregistered) => {\n            log.debug('replacing root worker result', unregistered);\n            resolve();\n          }).catch(resolve);\n        }).catch((e) => {\n          log.debug('replacing root service worker failed', e);\n          resolve();\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n\n  isSubscribed() {\n    return new Promise((resolve) => {\n      if (this.config.env === 'PREVIEW') {\n        return resolve(false);\n      }\n\n      const syncAndResolve = () => {\n        log.debug('httpsManager syncAndResolve');\n        if (this.checkingIfShouldSync) {\n          this.subscribed = true;\n          resolve(true);\n          return;\n        }\n        this.checkingIfShouldSync = true;\n\n        this.storageManager.checkIfShouldSync().then((shouldSync) => {\n          this.checkingIfShouldSync = false;\n          if (shouldSync) {\n            this.sync().then(() => {\n              log.debug('httpsManager subscribed = true (1)');\n              this.subscribed = true;\n              resolve(true);\n            }).catch((err) => {\n              log.warn('error while syncing', err);\n              // Raven.captureException(err);\n              log.debug('httpsManager subscribed = true (2)');\n              this.subscribed = true;\n              resolve(true);\n            });\n          } else {\n            log.debug('httpsManager subscribed = true (3)');\n            this.subscribed = true;\n            resolve(true);\n          }\n        });\n      };\n\n      const resubscribe = () => {\n        log.debug('httpsManager resubscribe');\n        if (!this.isSubscribing) {\n          this.isSubscribing = true;\n          this.isReSubscribe = true;\n          this.storageManager.canSubscribe().then((storageStatus) => {\n            if (storageStatus) {\n              if (storageStatus === SUBSCRIPTION_STATUS.WAS_DENIED) {\n                this.config.showConfirmAlert = true;\n                resolve(false);\n                this.isSubscribing = false;\n                this.subscribed = false;\n                return;\n              }\n\n              this.registerWorker().then((serviceWorkerRegistration) => this.pushManagerSubscribe(serviceWorkerRegistration)).then((subscription) => this.sync(subscription).then(() => {\n                this.isSubscribing = false;\n                this.triggerEvent(Event.SUBSCRIBED, this.storageManager.getSubscriptionId());\n                log.debug('httpsManager subscribed = true (4)');\n                this.subscribed = true;\n                resolve(true);\n              })).catch((err) => {\n                log.error(err);\n                this.isSubscribing = false;\n                // Raven.captureException(err);\n                log.debug('httpsManager subscribed = false (5)');\n                this.subscribed = false;\n                resolve(false);\n              });\n            } else {\n              this.isSubscribing = false;\n              resolve(false);\n            }\n          });\n        } else {\n          log.debug('httpsManager subscribed = true (6)');\n          this.subscribed = true;\n          resolve(true);\n        }\n      };\n\n      const isSubscribedHttps = () => {\n        if (window.Notification.permission === 'granted' && navigator.serviceWorker) {\n          // replace root worker with our worker\n          return this.getActiveWorkerRegistration().then((serviceWorkerRegistration) => serviceWorkerRegistration.pushManager.getSubscription().then((subscription) => {\n            // tries worker update\n            this.tryWorkerUpdate(serviceWorkerRegistration);\n\n            if (!subscription) {\n              if (this.config.showConfirmAlertResubscribe) {\n                this.config.showConfirmAlert = true;\n                resolve(false);\n                return;\n              }\n\n              log.debug('isSubscribed: no subscription found -> resubscribe');\n              resubscribe();\n            } else {\n              return this.storageManager.isSubscribed().then((storageStatus) => {\n                if (storageStatus) {\n                  syncAndResolve();\n                } else {\n                  log.debug('httpsManager subscribed = false (7)');\n                  this.subscribed = false;\n                  resolve(false);\n                }\n              });\n            }\n          })).catch((e) => {\n            if (this.config.showConfirmAlertResubscribe) {\n              this.config.showConfirmAlert = true;\n              resolve(false);\n              return;\n            }\n\n            log.debug('isSubscribed: -> resubscribe ', e);\n            resubscribe();\n          });\n        }\n        log.debug('isSubscribed: no perm or SW found');\n        log.debug('httpsManager subscribed = false (8)');\n        this.subscribed = false;\n        resolve(false);\n      };\n\n      this.replaceRootWorker().then(() => {\n        if (!this.iframeMessenger) {\n          return isSubscribedHttps();\n        }\n\n        this.iframeMessenger.isSubscribed().then((isSubscribed) => {\n          log.debug('isSubscribed', isSubscribed);\n          if (isSubscribed) {\n            return this.iframeMessenger.getSubscriptionId().then((iframeSubscriptionId) => {\n              if (\n                iframeSubscriptionId === this.storageManager.getSubscriptionId()\n                && (window.Notification.permission === 'granted' || this.config.autoRegister)\n              ) {\n                return isSubscribedHttps();\n              }\n              return syncAndResolve();\n            });\n          }\n          return isSubscribedHttps();\n        }).catch((err) => {\n          if (err) {\n            log.debug('isSubscribed err', err);\n            log.error(err);\n            // Raven.captureException(err);\n          }\n          log.debug('httpsManager subscribed = false (9)');\n          this.subscribed = false;\n          resolve(false);\n        });\n      });\n    });\n  }\n\n  pushManagerSubscribe(serviceWorkerRegistration, isRetry) {\n    return new Promise((resolve, reject) => {\n      serviceWorkerRegistration.pushManager.subscribe(this.getPushManagerSubscribeOptions()).then((subscription) => {\n        resolve(subscription);\n\n        this.unregisterOtherPushSubscriptions(serviceWorkerRegistration);\n      }).catch((err) => {\n        if (!isRetry && err && err.message && (err.message.indexOf('subscription with a different application server key') > -1 || err.message.indexOf('subscription with a different applicationServerKey') > -1)) {\n          serviceWorkerRegistration.pushManager.getSubscription().then((subscription) => {\n            if (subscription) {\n              this.migratedSubscription = true;\n\n              subscription.unsubscribe().then(() => {\n                this.pushManagerSubscribe(serviceWorkerRegistration, true).then(resolve).catch(reject);\n              }).catch(reject);\n            } else {\n              reject(err);\n            }\n          }).catch(reject);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  canSubscribe() {\n    return new Promise((resolve, reject) => {\n      // Permission denied - show unblock tutorial\n      if (window.Notification.permission === 'denied' && this.config.alertHoursDeny && localStorage.getItem('cleverpush-subscription-status') === 'was-denied' && sessionStorage.getItem('cleverpush-subscription-status') !== 'denied') {\n        this.config.showUnblockTutorial = true;\n        this.config.showConfirmAlert = true;\n        resolve(true);\n        return;\n      }\n\n      // Preview mode\n      if (this.config.env === 'PREVIEW') {\n        return resolve(true);\n      }\n\n      const canSubscribeHttpsReal = () => {\n        if (window.Notification.permission === 'denied') {\n          reject(new CleverPushError('User has manually denied notifications', 'unsubscribed'));\n        } else if (this.isSubscribing && this.isReSubscribe) {\n          reject(new CleverPushError('Currently automatically re-subscribing user in the background', 'isSubscribing'));\n        } else {\n          this.storageManager.canSubscribe().then((storageStatus) => {\n            log.debug('storageStatus canSubscribe', storageStatus);\n            if (storageStatus) {\n              this.isSubscribed().then((isSubscribed) => {\n                if (isSubscribed) {\n                  reject(new CleverPushError('User is already subscribed', 'subscribed'));\n                } else {\n                  resolve(true);\n                }\n              });\n            } else {\n              reject(new CleverPushError(`User has manually unsubscribed or denied notifications: ${storageStatus}`, 'unsubscribed'));\n            }\n          });\n        }\n      };\n\n      const canSubscribeHttps = () => {\n        if (this.config.importedSubscriptionsProvider === 'accengage' && this.config.importedSubscriptionsSubdomain) {\n          isSubscribedAccengage(this.config).then((subscribed) => {\n            if (subscribed) {\n              resolve(false);\n            } else {\n              return canSubscribeHttpsReal();\n            }\n          });\n        } else {\n          return canSubscribeHttpsReal();\n        }\n      };\n\n      if (!this.iframeMessenger) {\n        return canSubscribeHttps();\n      }\n\n      this.iframeMessenger.canSubscribe().then(({ result, message, reason }) => {\n        log.debug('canSubscribe from iframe', result);\n        if (result === true) {\n          return canSubscribeHttps();\n        }\n        reject(new CleverPushError(message, reason));\n      }, (err) => {\n        if (err) {\n          log.debug('canSubscribe err iframe', err);\n          // Raven.captureException(err);\n        }\n        reject(err);\n      });\n    });\n  }\n\n  getSubscriptionId() {\n    return new Promise((resolve) => {\n      const storedSubId = this.storageManager.getSubscriptionId();\n      if (storedSubId) {\n        resolve(storedSubId);\n      } else if (this.iframeMessenger) {\n        this.iframeMessenger.getSubscriptionId().then((subscriptionId) => {\n          resolve(subscriptionId);\n        });\n      } else {\n        resolve(null);\n      }\n    });\n  }\n\n  hasNotificationPermission() {\n    return new Promise((resolve) => {\n      if (this.config.env === 'PREVIEW') {\n        return resolve(false);\n      }\n\n      if (window.Notification.permission === 'granted') {\n        resolve(true);\n      } else {\n        /*\n        this.iframeMessenger.hasNotificationPermission().then((hasNotificationPermission) => {\n          resolve(hasNotificationPermission);\n        });\n        */\n        // don't check for subdomain page\n        // -> the notification permission is only used to determine if backdrop should be shown\n        resolve(false);\n      }\n    });\n  }\n\n  registerForPush() {\n    return new Promise((resolve, reject) => {\n      this.storageManager.setAllowed();\n\n      if (!(this.topics || []).length && this.config.confirmAlertNativeTheme && this.config.confirmAlertNativeTheme !== 'cleverpush-confirm-default' && this.confirm && this.confirm.hasTopicCheckboxes()) {\n        this.setTopics(this.confirm.getSelectedTopics());\n      }\n\n      this.registerWorker().then((serviceWorkerRegistration) => this.pushManagerSubscribe(serviceWorkerRegistration)).then((subscription) => {\n        log.debug('push manager subscription', subscription);\n        return this.sync(subscription).then(() => {\n          this.isSubscribing = false;\n          this.triggerEvent(Event.SUBSCRIBED, this.storageManager.getSubscriptionId());\n          resolve('granted');\n        });\n      }).catch((err) => {\n        log.error(err);\n        this.isSubscribing = false;\n        // Raven.captureException(err);\n        reject(err);\n      });\n    });\n  }\n\n  subscribeForce(alreadySubscribed) {\n    return new Promise((resolve, reject) => {\n      if (alreadySubscribed) {\n        resolve();\n      } else if (this.isSubscribing) {\n        reject(new SubscribingInProgressError('A subscription process is already in progress.'));\n      } else {\n        this.isSubscribing = true;\n\n        if (Notification.permission === 'default') {\n          Notification.requestPermission((permission) => {\n            if (permission === 'granted') {\n              this.registerForPushLater = false;\n\n              if (!this.registerForPushLater) {\n                this.registerForPush().then(resolve).catch(reject);\n              } else {\n                this.storageManager.setPending();\n              }\n\n              // hide backdrop after register (important to get selected topics first)\n              if (this.confirm) {\n                this.confirm.hideBackdrop(permission);\n\n                if (this.config.confirmAlertSelectTopicsLater && (this.confirm.channelTopics || []).length && !this.config.confirmAlertHideChannelTopics) {\n                  this.confirm.appendConfirmBox(this.config.confirmAlertSelectTopicsLaterTheme || 'cleverpush-confirm-default', true);\n\n                  if (this.config.confirmAlertSubscribeLater) {\n                    this.registerForPushLater = true;\n                  }\n                }\n              }\n            } else {\n              this.isSubscribing = false;\n\n              if (permission === 'default') {\n                this.storageManager.setClosed();\n\n                // firefox only allows showing once per session\n                if (browser.name === 'Firefox') {\n                  this.storageManager.setTempBlocked();\n                }\n              }\n\n              if (permission === 'denied' && this.config.env !== 'PREVIEW') {\n                this.api.confirmAlertDenied();\n\n                // set denied on subdomain iframe\n                this.storageManager.setDenied();\n              }\n\n              reject(new CleverPushError(translate('popup.info').formatCleverPush(`<strong>${translate('confirm.allowBrowser') || translate('confirm.allow')}</strong>`), permission));\n            }\n\n            log.debug('HTTP Permission Request Result:', permission);\n          });\n          this.api.confirmAlertShown(false, 'native-confirm-alert');\n        } else if (Notification.permission === 'denied') {\n          this.isSubscribing = false;\n          // TODO: introduce user how to enable notifications\n          reject(new CleverPushError(translate('popup.info').formatCleverPush(`<strong>${translate('confirm.allowBrowser') || translate('confirm.allow')}</strong>`), 'denied'));\n\n          // hide backdrop\n          /*\n          if (this.confirm) {\n            this.confirm.hideBackdrop();\n          }\n          */\n        } else {\n          log.debug('PermissionAlreadyGranted', this.config.confirmAlertSelectTopicsLater && (this.confirm.channelTopics || []).length && !this.config.confirmAlertHideChannelTopics);\n          this.registerForPush().then(resolve).catch(reject);\n\n          // hide backdrop\n          if (this.confirm) {\n            this.confirm.hideBackdrop('granted');\n\n            // Show Topics box if permission already granted and no topics available in storage\n            if (this.config.confirmAlertSelectTopicsLater && (this.confirm.channelTopics || []).length && !this.config.confirmAlertHideChannelTopics) {\n              this.getTopics().then((topics) => {\n                if (!(topics || []).length) {\n                  this.confirm.appendConfirmBox(this.config.confirmAlertSelectTopicsLaterTheme || 'cleverpush-confirm-default', true);\n                }\n              });\n            }\n          }\n        }\n      }\n    });\n  }\n\n  subscribe() {\n    return this.isSubscribed().then((alreadySubscribed) => this.subscribeForce(alreadySubscribed));\n  }\n\n  setClickedNotification(id) {\n    this.storageManager.setClickedNotification(id);\n    if (this.iframeMessenger) {\n      this.iframeMessenger.setClickedNotification(id);\n    }\n  }\n\n  getClickedNotification(milliseconds) {\n    return new Promise((resolve) => {\n      const id = this.storageManager.getClickedNotification(milliseconds);\n      if (!id && this.iframeMessenger) {\n        this.iframeMessenger.getClickedNotification().then((idFromIframe) => {\n          resolve(idFromIframe);\n        });\n      } else {\n        resolve(id);\n      }\n    });\n  }\n}\n","export function isSubscribedAccengage(config) {\n  return new Promise((resolve) => {\n\n    const messageListener = (e) => {\n      console.log('acc message', e.data);\n      if (e.data && e.data.type === 'mid:get:storage') {\n        window.removeEventListener('message', messageListener);\n        if (e.data.body) {\n          const body = JSON.parse(e.data.body);\n          if (body) {\n            resolve(body.isOptin === true);\n          } else {\n            resolve(false);\n          }\n        } else {\n          resolve(false);\n        }\n      }\n    };\n\n    window.addEventListener('message', messageListener);\n\n    let iframe = document.querySelector('iframe[name=\"acc_proxy\"]');\n    if (!iframe) {\n      iframe = document.createElement('iframe');\n      iframe.src = 'https://' + config.importedSubscriptionsSubdomain + '.accengage.net/pushweb/assets/m_main.html';\n      iframe.style.display = 'none';\n      iframe.style.border = 'none';\n      iframe.name = 'acc_proxy';\n      iframe.onload = () => {\n        iframe.contentWindow.postMessage({ topic: 'mid:get:storage', type: 'mid:get:storage', body: {} }, '*');\n      };\n      iframe.onerror = () => resolve(false);\n      document.body.appendChild(iframe);\n    } else {\n      iframe.contentWindow.postMessage({ topic: 'mid:get:storage', type: 'mid:get:storage', body: {} }, '*');\n    }\n  });\n}\n"],"sourceRoot":""}