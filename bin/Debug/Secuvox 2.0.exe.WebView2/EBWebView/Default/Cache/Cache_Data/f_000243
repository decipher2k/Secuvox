{"version":3,"sources":["webpack://@cleverpush/cleverpush-js-sdk/./node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","webpack://@cleverpush/cleverpush-js-sdk/./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","webpack://@cleverpush/cleverpush-js-sdk/./node_modules/@babel/runtime/helpers/esm/iterableToArray.js","webpack://@cleverpush/cleverpush-js-sdk/./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","webpack://@cleverpush/cleverpush-js-sdk/./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","webpack://@cleverpush/cleverpush-js-sdk/./node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","webpack://@cleverpush/cleverpush-js-sdk/./src/const/common.js","webpack://@cleverpush/cleverpush-js-sdk/./src/storage/manager.js","webpack://@cleverpush/cleverpush-js-sdk/./src/subscription/manager.js","webpack://@cleverpush/cleverpush-js-sdk/./src/utils/https.js"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_arrayWithoutHoles","isArray","_iterableToArray","iter","Symbol","iterator","from","_nonIterableSpread","TypeError","_toConsumableArray","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","INT_RADIX","TRUE_STRING","ZERO_STRING","TOPIC_LAYER_VISITS_DEFAULT","FOLLOW_UP_PARENT_ELEMENTS_CHECK","WHITESPACE_REGEX","SPACE_CHARACTER","CSS_SELECTOR_SEPARATOR","DAY","HOURS","MINUTES","DEFAULT_LANGUAGE","KEY_SPEECHBUBBLE_UNREAD_NOTIFICATIONS","KEY_HAS_UNREAD_NOTIFICATIONS","KEY_UNREAD_NOTIFICATIONS_COUNT","KEY_DENY_COUNT","KEY_SUBSCRIPTION_STATUS","KEY_FORCED_OPT_IN_RESET_AT","PANEL_TABS","freeze","NOTIFICATIONS","SETTINGS","SUBSCRIPTION_STATUS","DENIED","WAS_DENIED","UNSUBSCRIBED","PENDING","ALLOWED","TCF_MAX_RETRY_COUNT","TCF_RETRY_DELAY_MS","TCF_VERSION","POST_MESSAGE_ALLOWED_METHODS","KEY_DENY_SESSIONS","KEY_DENY_TIME","KEY_DENY_SESSIONS_COUNTED","KEY_CLOSE_TIME","KEY_CLOSE_SESSIONS","KEY_CLOSE_SESSIONS_COUNTED","KEY_SUBSCRIPTION_ID","KEY_SUBSCRIPTION_ID_OLD","KEY_SUBSCRIPTION_STATUS_OLD","KEY_DOMAIN","DEFAULT_DOMAIN","KEY_LAST_SYNC","KEY_LAST_SESSION","KEY_VISITS","KEY_TAGS","KEY_TAG_DATES","KEY_TOPICS","KEY_LAST_WORKER_UPDATE","KEY_LAST_WORKER_VERSION","KEY_NOTIFICATION_CLICKED","KEY_FACEBOOK_USER_REF","KEY_PIANO_SEGMENTS_HASH","KEY_READ_NOTIFICATIONS","INDEXED_DB_DATABASE","INDEXED_DB_TABLE_NOTIFICATIONS","INDEXED_DB_TABLE_SUBSCRIPTION","INDEXED_DB_CURSOR_PREV","INDEXED_DB_TRANSACTION_READONLY","INDEXED_DB_TRANSACTION_READWRITE","MILLIS_PER_HOUR","StorageManager","config","this","window","cleverpushDomain","localStorage","getItem","setItem","currentTime","Date","now","denyCount","parseInt","isUnsubscribed","alertHoursDeny","alertHoursUnsubscribe","alertSessionsDeny","alertSessionsUnsubscribe","alertHoursSecondDeny","alertSessionsSecondDeny","denyTimeAllowed","denySessionsAllowed","denyTime","denyHours","isNaN","denySessions","sessionStorage","setDenyStatus","closeTimeAllowed","closeSessionsAllowed","alertHoursClose","closeTime","closeHours","alertSessionsClose","closeSessions","removeItem","forcedOptInResetAt","forcedOptInResetOnlyIfLastResetBefore","getTime","error","log","dbInitializing","message","includes","indexedDB","deleteDatabase","onsuccess","openReq","db","open","dbOpenSuccess","onerror","openError","result","onversionchange","newVersion","target","close","versionDbOpen","dbOpenError","callback","onupgradeneeded","event","notifications","createObjectStore","keyPath","createIndex","unique","subscription","Promise","resolve","cursorRequest","transaction","objectStore","index","openCursor","max","push","value","continue","id","getRequest","get","notification","notificationDocument","reject","putRequest","put","deleteRequest","delete","status","sessionStatus","allowEmptyId","noPromise","fromIframe","getSubscriptionId","ampSubscribed","isPopupUnsubscribe","params","URLSearchParams","location","search","JSON","stringify","date","milliseconds","clickedNotif","clickedNotifObj","parse","lastSessionStr","lastSession","subscriptionId","initDb","clear","channelId","userRef","hasDenyCountFilter","confirmAlertFilters","find","filter","type","notManually","keys","forEach","key","startsWith","document","querySelectorAll","link","classList","contains","remove","syncHours","checkSyncViaInterval","syncInterval","lastSync","lastSyncTime","pianoEnabled","pianoPublicPersistedId","existingPianoHash","getPianoSegmentsHash","then","pianoHash","catch","pianoError","currentVersion","VERSION","lastVersion","storedVisits","visits","getVisits","topics","topicsStr","tagDates","getTagDates","tags","tag","toISOString","getTags","indexOf","setTags","tagIndex","splice","tagsStr","attributeId","getAttribute","storedValue","notificationId","readNotifications","notificationIds","Set","checkUnread","some","item","_id","count","err","newNotificationsIds","SubscriptionManager","api","triggerEvent","storageManager","subscribed","initialTags","getTopics","e","env","Notification","permission","navigator","serviceWorker","getActiveWorkerRegistration","serviceWorkerRegistration","pushManager","getSubscription","isSubscribed","storageStatus","canSubscribe","CleverPushError","subscribe","unsubscribeModal","parentNode","removeChild","confirm","hideBackdrop","unsubscribeFeedbackDisabled","feedback","optOutFeedbackAnswers","feedbackAnswer","title","icon","optOutFeedbackCustomText","translate","configAlertLocalization","alertLocalization","language","detectLanguage","alertLocalizationTranslations","closeButtonHtml","confirmAlertCloseButton","createElement","className","innerHTML","confirmAlertThemeBackgroundColor","channelIcon","charsetEscape","optOutFeedbackTitle","map","f","join","body","appendChild","showBackdrop","closeButton","querySelector","addEventListener","hideUnsubscribeModal","confirmBox","confirmAlertStyle","color","style","buttons","preventDefault","currentTarget","dataset","reAllow","reason","showCustomText","unsubscribeFeedback","modal","text","alreadyUnsubscribedId","removeBrowserSubscription","setUnsubscribed","Event","registration","unsubscribe","unregister","showUnsubscribeFeedback","isPopup","popupCustomDomainEnabled","popupDomain","serviceWorkerFile","workerPath","getWorkerPath","split","substr","lastIndexOf","active","waiting","installing","getRegistration","workerScope","getWorkerScope","getServiceWorker","scriptURL","getRegistrations","registrations","found","scopeRegistration","controller","ready","registerNewWorker","register","scope","updateViaCache","state","currentWorkerRegistration","cleverpushRegistration","logMethodCall","importedSubscriptionsProvider","migratedSubscription","tryWorkerUpdateCalled","checkIfShouldUpdateWorker","shouldUpdate","update","setWorkerUpdated","unregisterOtherPushSubscriptionsCalled","unregisterOtherPushSubscriptions","subscriptionParam","topicsParam","syncInProgress","subscriptionIdParam","doSync","syncParams","existingPermission","isReSubscribe","syncSubscription","res","setSubscribed","iframeMessenger","setSynced","setTopics","topicsVersion","ignored","channelTags","autoAssignOptInPath","RegExp","pathname","CleverPush","tagSubscription","hasNotificationPermission","hasPermission","subId","force","browser","hasNotificationsStoredInBrowserDb","getNotifications","path","sort","topic","request","response","createdAt","a","b","testVariants","mediaUrl","url","console","deleteNotification","subscribeOptions","userVisibleOnly","vapidPublicKey","urlBase64ToUint8Array","applicationServerKey","setClickedNotification","getClickedNotification","base64String","base64","repeat","replace","rawData","atob","outputArray","Uint8Array","charCodeAt"],"mappings":"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","file":"chunk/5.7bf12eb14858c1f4fd98.js","sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","export const INT_RADIX = 10;\nexport const TRUE_STRING = 'true';\nexport const ZERO_STRING = '0';\nexport const TOPIC_LAYER_VISITS_DEFAULT = 0;\nexport const FOLLOW_UP_PARENT_ELEMENTS_CHECK = 10;\nexport const WHITESPACE_REGEX = /\\s+/g;\nexport const SPACE_CHARACTER = ' ';\nexport const CSS_SELECTOR_SEPARATOR = ',';\nexport const DAY = 1000 * 60 * 60 * 24;\nexport const HOURS = 1000 * 60 * 60;\nexport const MINUTES = 1000 * 60;\nexport const DEFAULT_LANGUAGE = 'en';\n\nexport const KEY_SPEECHBUBBLE_UNREAD_NOTIFICATIONS = 'cheverpush-speechbubble-unread-notifications';\nexport const KEY_HAS_UNREAD_NOTIFICATIONS = 'cp-has-unread-notifications';\nexport const KEY_UNREAD_NOTIFICATIONS_COUNT = 'cleverpush-unread-notifications';\nexport const KEY_DENY_COUNT = 'cleverpush-deny-count';\nexport const KEY_SUBSCRIPTION_STATUS = 'cleverpush-subscription-status';\nexport const KEY_UNREAD_NOTIFICATIONS_CLASS = 'cleverpush-unread-notifications-count';\nexport const KEY_FORCED_OPT_IN_RESET_AT = 'cleverpush-forced-opt-in-reset-at';\n\nexport const PANEL_TABS = Object.freeze({\n  NOTIFICATIONS: 'notifications',\n  SETTINGS: 'settings'\n});\n\nexport const SUBSCRIPTION_STATUS = {\n  DENIED: 'denied',\n  WAS_DENIED: 'was-denied',\n  UNSUBSCRIBED: 'unsubscribed',\n  PENDING: 'pending',\n  ALLOWED: 'allowed',\n};\n\nexport const TCF_MAX_RETRY_COUNT = 30;\nexport const TCF_RETRY_DELAY_MS = 500;\nexport const TCF_VERSION = 2;\n\n// We only allow certain methods to prevent unwanted XSS\nexport const POST_MESSAGE_ALLOWED_METHODS = [\n  'triggerFollowUpEvent',\n  'trackEvent',\n  'trackConversion',\n  'tagSubscription',\n  'untagSubscription',\n  'setAttribute',\n  'incAttribute',\n  'pushAttributeValue',\n  'pullAttributeValue',\n  'subscribe',\n  'triggerOptIn',\n  'unsubscribe',\n];\n","import { isPopupUnsubscribe } from '../utils/env';\nimport { log } from '../utils/debug';\nimport { getPianoSegmentsHash } from '../utils/piano';\nimport {\n  INT_RADIX, TRUE_STRING, SUBSCRIPTION_STATUS, KEY_SUBSCRIPTION_STATUS, KEY_DENY_COUNT, KEY_UNREAD_NOTIFICATIONS_COUNT, ZERO_STRING, KEY_SPEECHBUBBLE_UNREAD_NOTIFICATIONS, KEY_HAS_UNREAD_NOTIFICATIONS, KEY_FORCED_OPT_IN_RESET_AT\n} from '../const/common';\n\nconst KEY_DENY_SESSIONS = 'cleverpush-deny-sessions';\nconst KEY_DENY_TIME = 'cleverpush-deny-time';\nconst KEY_DENY_SESSIONS_COUNTED = 'cleverpush-deny-sessions-counted';\nconst KEY_CLOSE_TIME = 'cleverpush-close-time';\nconst KEY_CLOSE_SESSIONS = 'cleverpush-close-sessions';\nconst KEY_CLOSE_SESSIONS_COUNTED = 'cleverpush-close-sessions-counted';\nconst KEY_SUBSCRIPTION_ID = 'cleverpush-subscription-id';\nconst KEY_SUBSCRIPTION_ID_OLD = 'push-subscription-id';\nconst KEY_SUBSCRIPTION_STATUS_OLD = 'push-subscription-status';\nconst KEY_DOMAIN = 'cleverpush-domain';\nconst DEFAULT_DOMAIN = 'cleverpush.com';\nconst KEY_LAST_SYNC = 'cleverpush-last-sync';\nconst KEY_LAST_SESSION = 'cleverpush-last-session';\nconst KEY_VISITS = 'cleverpush-visits';\nconst KEY_ATTRIBUTES = 'cleverpush-attributes';\nconst KEY_ATTRIBUTE_PREFIX = 'cleverpush-attribute';\nconst KEY_TAG_PREFIX = 'cleverpush-tag';\nconst KEY_TAGS = 'cleverpush-tags';\nconst KEY_TAG_DATES = 'cleverpush-tag-dates';\nconst KEY_TOPICS = 'cleverpush-topics';\nconst KEY_TOPICS_VERSION = 'cleverpush-topics-version';\nconst KEY_LAST_WORKER_UPDATE = 'cleverpush-last-worker-update';\nconst KEY_LAST_WORKER_VERSION = 'cleverpush-last-worker-version';\nconst KEY_NOTIFICATION_CLICKED = 'cleverpush-notification-clicked';\nconst KEY_FACEBOOK_USER_REF = 'cleverpush-facebook-user-ref';\nconst KEY_AMP_WEB_PUSH_PERMISSION = 'amp-web-push-notification-permission';\nconst KEY_PIANO_SEGMENTS_HASH = 'cleverpush-piano-segments-hash';\nconst KEY_READ_NOTIFICATIONS = 'cleverpush-read-notifications';\nconst AMP_WEB_PUSH_PERMISSION_GRANTED = 'granted';\nconst INDEXED_DB_DATABASE = 'cleverpush';\nconst INDEXED_DB_TABLE_NOTIFICATIONS = 'notifications';\nconst INDEXED_DB_TABLE_SUBSCRIPTION = 'subscription';\nconst INDEXED_DB_VERSION = 40;\nconst INDEXED_DB_NOTIFICATIONS_MAXIMUM = 50;\nconst INDEXED_DB_ERROR_VERSION = 'VersionError';\nconst INDEXED_DB_ERROR_DATABASE = 'NoSuchDatabaseError';\nconst INDEXED_DB_CURSOR_PREV = 'prev';\nconst INDEXED_DB_TRANSACTION_READONLY = 'readonly';\nconst INDEXED_DB_TRANSACTION_READWRITE = 'readwrite';\nconst ALERT_HOURS_DENY_DEFAULT = 365 * 24;\nconst MILLIS_PER_HOUR = 60 * 60 * 1000;\nconst SYNC_INTERVAL_HOURS = 2 * 24;\nconst SYNC_INTERVAL_HOURS_PIANO = 2;\nconst UPDATE_WORKER_INTERVAL_24_HOURS = 24;\n\nexport default class StorageManager {\n  constructor(config) {\n    this.config = config;\n\n    try {\n      if ('localStorage' in window) {\n        // set cleverpush domain to default if there is a subscription\n        if (config.cleverpushDomain) {\n          if (\n            config.cleverpushDomain\n            && localStorage.getItem(KEY_SUBSCRIPTION_ID)\n            && !localStorage.getItem(KEY_DOMAIN)\n          ) {\n            localStorage.setItem(KEY_DOMAIN, DEFAULT_DOMAIN);\n          }\n          if (localStorage.getItem(KEY_DOMAIN)) {\n            this.config.cleverpushDomain = localStorage.getItem(KEY_DOMAIN);\n          }\n        }\n\n        // transfer old values\n        if (\n          localStorage.getItem(KEY_SUBSCRIPTION_STATUS_OLD)\n          && !localStorage.getItem(KEY_SUBSCRIPTION_STATUS)\n        ) {\n          localStorage.setItem(KEY_SUBSCRIPTION_STATUS, localStorage.getItem(KEY_SUBSCRIPTION_STATUS_OLD));\n        }\n        if (\n          localStorage.getItem(KEY_SUBSCRIPTION_ID_OLD)\n          && !localStorage.getItem(KEY_SUBSCRIPTION_ID)\n        ) {\n          localStorage.setItem(KEY_SUBSCRIPTION_ID, localStorage.getItem(KEY_SUBSCRIPTION_ID_OLD));\n        }\n\n        // check frequency capping\n        if (\n          localStorage.getItem(KEY_SUBSCRIPTION_STATUS) !== SUBSCRIPTION_STATUS.ALLOWED\n        ) {\n          const currentTime = Date.now();\n          const denyCount = parseInt(localStorage.getItem(KEY_DENY_COUNT), INT_RADIX);\n          const isUnsubscribed = localStorage.getItem(KEY_SUBSCRIPTION_STATUS) === SUBSCRIPTION_STATUS.UNSUBSCRIBED;\n\n          let alertHoursDeny = isUnsubscribed ? this.config.alertHoursUnsubscribe : this.config.alertHoursDeny;\n          const alertSessionsDeny = isUnsubscribed ? this.config.alertSessionsUnsubscribe : this.config.alertSessionsDeny;\n\n          const alertHoursSecondDeny = isUnsubscribed ? this.config.alertHoursUnsubscribe : this.config.alertHoursSecondDeny;\n          const alertSessionsSecondDeny = isUnsubscribed ? this.config.alertSessionsUnsubscribe : this.config.alertSessionsSecondDeny;\n\n          if (!isUnsubscribed && typeof alertHoursDeny === 'undefined') {\n            // default: 365 days\n            alertHoursDeny = ALERT_HOURS_DENY_DEFAULT;\n          }\n\n          let denyTimeAllowed = false;\n          let denySessionsAllowed = false;\n\n          if (localStorage.getItem(KEY_DENY_TIME) && alertHoursDeny > 0) {\n            const denyTime = parseInt(localStorage.getItem(KEY_DENY_TIME), INT_RADIX);\n            const denyHours = parseInt(alertHoursDeny, INT_RADIX);\n            if (!isNaN(denyTime) && !isNaN(denyHours) && !isNaN(denyCount) && denyCount <= 1) {\n              if (denyTime + (denyHours * MILLIS_PER_HOUR) < currentTime) {\n                denyTimeAllowed = true;\n              }\n            }\n          }\n\n          // second deny hours\n          if (localStorage.getItem(KEY_DENY_TIME) && alertHoursSecondDeny > 0) {\n            const denyTime = parseInt(localStorage.getItem(KEY_DENY_TIME), INT_RADIX);\n            const denyHours = parseInt(alertHoursDeny, INT_RADIX);\n            if (!isNaN(denyTime) && !isNaN(denyHours) && !isNaN(denyCount) && denyCount > 1) {\n              if (denyTime + (denyHours * MILLIS_PER_HOUR) < currentTime) {\n                denyTimeAllowed = true;\n              }\n            }\n          }\n\n          if (localStorage.getItem(KEY_DENY_SESSIONS) && alertSessionsDeny > 0) {\n            let denySessions = parseInt(localStorage.getItem(KEY_DENY_SESSIONS), INT_RADIX);\n            if (!isNaN(denySessions) && denyCount <= 1) {\n              if (!sessionStorage.getItem(KEY_DENY_SESSIONS_COUNTED)) {\n                denySessions += 1;\n                localStorage.setItem(KEY_DENY_SESSIONS, denySessions);\n              }\n              if (denySessions >= alertSessionsDeny) {\n                denySessionsAllowed = true;\n              }\n            }\n          }\n\n          // second session deny\n          if (localStorage.getItem(KEY_DENY_SESSIONS) && alertSessionsSecondDeny > 0) {\n            let denySessions = parseInt(localStorage.getItem(KEY_DENY_SESSIONS), INT_RADIX);\n            if (!isNaN(denySessions) && !isNaN(denyCount) && denyCount > 1) {\n              if (!sessionStorage.getItem(KEY_DENY_SESSIONS_COUNTED)) {\n                denySessions += 1;\n                localStorage.setItem(KEY_DENY_SESSIONS, denySessions);\n              }\n              if (denySessions >= alertSessionsDeny) {\n                denySessionsAllowed = true;\n              }\n            }\n          }\n\n          if (\n            (denyTimeAllowed || denySessionsAllowed)\n            && (!alertHoursDeny || denyTimeAllowed)\n            && (!alertSessionsDeny || denySessionsAllowed)\n          ) {\n            this.setDenyStatus();\n          }\n\n          // second deny\n          if (\n            (denyTimeAllowed || denySessionsAllowed)\n            && (!alertHoursSecondDeny || denyTimeAllowed)\n            && (!alertSessionsSecondDeny || denySessionsAllowed)\n          ) {\n            this.setDenyStatus();\n          }\n\n          if (!isUnsubscribed) {\n            let closeTimeAllowed = false;\n            let closeSessionsAllowed = false;\n\n            if (localStorage.getItem(KEY_CLOSE_TIME) && this.config.alertHoursClose > 0) {\n              const closeTime = parseInt(localStorage.getItem(KEY_CLOSE_TIME), INT_RADIX);\n              const closeHours = parseInt(this.config.alertHoursClose, INT_RADIX);\n              if (!isNaN(closeTime) && !isNaN(closeHours)) {\n                if (closeTime + (closeHours * MILLIS_PER_HOUR) < currentTime) {\n                  closeTimeAllowed = true;\n                }\n              }\n            }\n\n            if (localStorage.getItem(KEY_CLOSE_SESSIONS) && this.config.alertSessionsClose > 0) {\n              let closeSessions = parseInt(localStorage.getItem(KEY_CLOSE_SESSIONS), INT_RADIX);\n              if (!isNaN(closeSessions)) {\n                if (!sessionStorage.getItem(KEY_CLOSE_SESSIONS_COUNTED)) {\n                  closeSessions += 1;\n                  localStorage.setItem(KEY_CLOSE_SESSIONS, closeSessions);\n                }\n                if (closeSessions >= this.config.alertSessionsClose) {\n                  closeSessionsAllowed = true;\n                }\n              }\n            }\n\n            if (\n              (closeTimeAllowed || closeSessionsAllowed)\n              && (!this.config.alertHoursClose || closeTimeAllowed)\n              && (!this.config.alertSessionsClose || closeSessionsAllowed)\n            ) {\n              localStorage.removeItem(KEY_SUBSCRIPTION_STATUS_OLD);\n              localStorage.removeItem(KEY_SUBSCRIPTION_STATUS);\n              localStorage.removeItem(KEY_CLOSE_TIME);\n              localStorage.removeItem(KEY_CLOSE_SESSIONS);\n            }\n          }\n        }\n\n        // forced opt-in reset by customer\n        if (\n          this.config.forcedOptInResetAt\n          && (\n            !this.config.forcedOptInResetOnlyIfLastResetBefore\n            || !localStorage.getItem(KEY_FORCED_OPT_IN_RESET_AT)\n            || new Date(localStorage.getItem(KEY_FORCED_OPT_IN_RESET_AT)) < new Date(this.config.forcedOptInResetOnlyIfLastResetBefore)\n          )\n          && localStorage.getItem(KEY_FORCED_OPT_IN_RESET_AT) !== new Date(this.config.forcedOptInResetAt).getTime().toString()\n          && localStorage.getItem(KEY_SUBSCRIPTION_STATUS) !== SUBSCRIPTION_STATUS.ALLOWED\n        ) {\n          localStorage.setItem(KEY_FORCED_OPT_IN_RESET_AT, new Date(this.config.forcedOptInResetAt).getTime().toString());\n\n          localStorage.removeItem(KEY_SUBSCRIPTION_STATUS_OLD);\n          localStorage.removeItem(KEY_SUBSCRIPTION_STATUS);\n          localStorage.removeItem(KEY_CLOSE_TIME);\n          localStorage.removeItem(KEY_CLOSE_SESSIONS);\n          localStorage.removeItem(KEY_DENY_TIME);\n          sessionStorage.removeItem('cleverpush-alert-shown');\n          sessionStorage.removeItem('cleverpush-confirm-alert-reported');\n        }\n      }\n    } catch (error) {\n      log.warn('Failed getting managing storage (frequency capping)', error);\n    }\n  }\n\n  setDenyStatus() {\n    localStorage.removeItem(KEY_SUBSCRIPTION_STATUS_OLD);\n    localStorage.removeItem(KEY_DENY_TIME);\n    localStorage.removeItem(KEY_DENY_SESSIONS);\n    if (\n      localStorage.getItem(KEY_SUBSCRIPTION_STATUS) === SUBSCRIPTION_STATUS.DENIED\n      || localStorage.getItem(KEY_SUBSCRIPTION_STATUS) === SUBSCRIPTION_STATUS.UNSUBSCRIBED\n    ) {\n      localStorage.setItem(KEY_SUBSCRIPTION_STATUS, SUBSCRIPTION_STATUS.WAS_DENIED);\n    } else {\n      localStorage.removeItem(KEY_SUBSCRIPTION_STATUS);\n    }\n  }\n\n  dbOpenError(error) {\n    this.dbInitializing = false;\n    if (error.message && error.message.toString().includes(INDEXED_DB_ERROR_VERSION)) {\n      log.info('deleting db');\n\n      const deleteReq = window.indexedDB.deleteDatabase(INDEXED_DB_DATABASE);\n      deleteReq.onsuccess = () => {\n        const openReq = this.db.open();\n        openReq.onsuccess = () => this.dbOpenSuccess(openReq);\n        openReq.onerror = (openError) => {\n          log.warn(openError);\n        };\n      };\n    } else if (!error.name || error.name !== INDEXED_DB_ERROR_DATABASE) {\n      log.warn(error);\n    }\n  }\n\n  dbOpenSuccess(openReq) {\n    this.db = openReq.result;\n    this.dbInitializing = false;\n\n    this.db.onerror = (error) => {\n      log.warn('IndexedDB error occured', error);\n    };\n\n    this.db.onversionchange = (error) => {\n      if (error.newVersion === null) {\n        error.target.close();\n      } else {\n        this.db.close();\n        const versionDbOpen = window.indexedDB.open(INDEXED_DB_DATABASE, INDEXED_DB_VERSION);\n\n        versionDbOpen.onsuccess = () => this.dbOpenSuccess(versionDbOpen);\n        versionDbOpen.onerror = this.dbOpenError;\n      }\n    };\n  }\n\n  initDb(callback) {\n    if (!this.db && window.indexedDB && !this.dbInitializing) {\n      this.dbInitializing = true;\n      try {\n        const openReq = window.indexedDB.open(INDEXED_DB_DATABASE, INDEXED_DB_VERSION);\n\n        openReq.onsuccess = () => {\n          this.dbOpenSuccess(openReq);\n          if (typeof callback === 'function') {\n            callback(openReq.result);\n          }\n        };\n        openReq.onerror = this.dbOpenError;\n        openReq.onupgradeneeded = (event) => {\n          const db = event.target.result;\n\n          const notifications = db.createObjectStore(INDEXED_DB_TABLE_NOTIFICATIONS, { keyPath: 'id' });\n          notifications.createIndex('id', 'id', { unique: true });\n          notifications.createIndex('url', 'url', { unique: false });\n          notifications.createIndex('clicked', 'clicked', { unique: false });\n          notifications.createIndex('title', 'title', { unique: false });\n          notifications.createIndex('text', 'text', { unique: false });\n          notifications.createIndex('icon', 'icon', { unique: false });\n          notifications.createIndex('subscriptionId', 'subscriptionId', { unique: false });\n          notifications.createIndex('channelId', 'channelId', { unique: false });\n          notifications.createIndex('autoHide', 'autoHide', { unique: false });\n          notifications.createIndex('markedAsDelivered', 'markedAsDelivered', { unique: false });\n          notifications.createIndex('markedAsClicked', 'markedAsClicked', { unique: false });\n          notifications.createIndex('clickedAction', 'clickedAction', { unique: false });\n          notifications.createIndex('deliveredAt', 'deliveredAt', { unique: false });\n\n          const subscription = db.createObjectStore(INDEXED_DB_TABLE_SUBSCRIPTION, { keyPath: 'id' });\n          subscription.createIndex('id', 'id', { unique: true });\n          subscription.createIndex('channelId', 'channelId', { unique: false });\n        };\n      } catch (error) {\n        this.dbInitializing = false;\n        log.info('initDb error', error);\n      }\n    } else if (this.db) {\n      if (typeof callback === 'function') {\n        callback(this.db);\n      }\n    }\n  }\n\n  hasNotificationsStoredInBrowserDb() {\n    if (!this.db) {\n      log.info('hasNotificationsStoredInBrowserDb error: no db');\n      return false;\n    }\n\n    return new Promise((resolve) => {\n      const transaction = this.db.transaction([INDEXED_DB_TABLE_NOTIFICATIONS], INDEXED_DB_TRANSACTION_READONLY);\n      const notificationsObjectStore = transaction.objectStore(INDEXED_DB_TABLE_NOTIFICATIONS);\n      const deliveredAtIndex = notificationsObjectStore.index('deliveredAt');\n\n      const cursorRequest = deliveredAtIndex.openCursor(null, INDEXED_DB_CURSOR_PREV);\n\n      cursorRequest.onsuccess = (event) => {\n        const result = event.target.result;\n        if (!!result === false) {\n          resolve(false);\n          return;\n        }\n\n        resolve(true);\n      };\n      cursorRequest.onerror = () => resolve(false);\n    });\n  }\n\n  getNotifications(max) {\n    return new Promise((resolve) => {\n      const notifications = [];\n\n      if (this.db) {\n        const transaction = this.db.transaction([INDEXED_DB_TABLE_NOTIFICATIONS], INDEXED_DB_TRANSACTION_READONLY);\n        const notificationsObjectStore = transaction.objectStore(INDEXED_DB_TABLE_NOTIFICATIONS);\n        const deliveredAtIndex = notificationsObjectStore.index('deliveredAt');\n\n        const cursorRequest = deliveredAtIndex.openCursor(null, INDEXED_DB_CURSOR_PREV);\n\n        cursorRequest.onsuccess = (event) => {\n          const result = event.target.result;\n          if (!!result === false || notifications.length >= (max || INDEXED_DB_NOTIFICATIONS_MAXIMUM)) {\n            resolve(notifications);\n            return;\n          }\n\n          notifications.push(result.value);\n\n          result.continue();\n        };\n        cursorRequest.onerror = () => resolve(notifications);\n      } else {\n        log.info('getNotifications db undefined');\n        resolve(notifications);\n      }\n    });\n  }\n\n  getNotification(id) {\n    return new Promise((resolve) => {\n      if (this.db) {\n        const transaction = this.db.transaction([INDEXED_DB_TABLE_NOTIFICATIONS]);\n        const notificationsObjectStore = transaction.objectStore(INDEXED_DB_TABLE_NOTIFICATIONS);\n\n        const getRequest = notificationsObjectStore.get(id);\n        getRequest.onsuccess = (event) => {\n          const notification = event.target.result;\n          resolve(notification);\n        };\n        getRequest.onerror = () => resolve(null);\n      } else {\n        resolve(null);\n      }\n    });\n  }\n\n  addNotification(notificationDocument) {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        const transaction = this.db.transaction([INDEXED_DB_TABLE_NOTIFICATIONS], INDEXED_DB_TRANSACTION_READWRITE);\n        const notificationsObjectStore = transaction.objectStore(INDEXED_DB_TABLE_NOTIFICATIONS);\n\n        const putRequest = notificationsObjectStore.put(notificationDocument);\n        putRequest.onsuccess = resolve;\n        putRequest.onerror = reject;\n      } else {\n        resolve(null);\n      }\n    });\n  }\n\n  deleteNotification(id) {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        const transaction = this.db.transaction([INDEXED_DB_TABLE_NOTIFICATIONS], INDEXED_DB_TRANSACTION_READWRITE);\n        const notificationsObjectStore = transaction.objectStore(INDEXED_DB_TABLE_NOTIFICATIONS);\n\n        const deleteRequest = notificationsObjectStore.delete(id);\n        deleteRequest.onsuccess = resolve;\n        deleteRequest.onerror = reject;\n      } else {\n        resolve(null);\n      }\n    });\n  }\n\n  // returns false if the user CAN subscribe (and is not subscribed)\n  canSubscribe() {\n    try {\n      return new Promise((resolve) => {\n        try {\n          const status = localStorage.getItem(KEY_SUBSCRIPTION_STATUS);\n          const sessionStatus = sessionStorage.getItem(KEY_SUBSCRIPTION_STATUS);\n          if (\n            status !== SUBSCRIPTION_STATUS.DENIED\n            && status !== SUBSCRIPTION_STATUS.UNSUBSCRIBED\n            && status !== SUBSCRIPTION_STATUS.PENDING\n            && sessionStatus !== SUBSCRIPTION_STATUS.DENIED\n          ) {\n            resolve(status || true);\n          } else {\n            resolve(false);\n          }\n        } catch (error) {\n          resolve(true);\n        }\n      });\n    } catch (error) {\n      return Promise.resolve(true);\n    }\n  }\n\n  // returns true if user is subscribed\n  isSubscribed(allowEmptyId, noPromise, fromIframe) {\n    try {\n      if (typeof noPromise !== 'undefined' && noPromise) {\n        const status = localStorage.getItem(KEY_SUBSCRIPTION_STATUS);\n        if (\n          status\n          && status !== SUBSCRIPTION_STATUS.DENIED\n          && status !== SUBSCRIPTION_STATUS.UNSUBSCRIBED\n          && status !== SUBSCRIPTION_STATUS.PENDING\n        ) {\n          if (allowEmptyId) {\n            return true;\n          }\n          const subscriptionIdExists = !!this.getSubscriptionId();\n          return subscriptionIdExists;\n        }\n        return false;\n      }\n\n      return new Promise((resolve) => {\n        try {\n          const status = localStorage.getItem(KEY_SUBSCRIPTION_STATUS);\n          if (\n            status\n            && status !== SUBSCRIPTION_STATUS.DENIED\n            && status !== SUBSCRIPTION_STATUS.UNSUBSCRIBED\n            && status !== SUBSCRIPTION_STATUS.PENDING\n          ) {\n            const ampSubscribed = localStorage.getItem(KEY_AMP_WEB_PUSH_PERMISSION) === AMP_WEB_PUSH_PERMISSION_GRANTED;\n            if (allowEmptyId || ampSubscribed) {\n              resolve(true);\n            } else {\n              const subscriptionIdExists = !!this.getSubscriptionId();\n              resolve(subscriptionIdExists);\n            }\n          } else if (typeof fromIframe !== 'undefined' && fromIframe) {\n            const subscriptionIdExists = !!this.getSubscriptionId();\n            resolve(subscriptionIdExists);\n          } else {\n            resolve(false);\n          }\n        } catch (error) {\n          resolve(false);\n        }\n      });\n    } catch (error) {\n      return Promise.resolve(true);\n    }\n  }\n\n  getSubscriptionId() {\n    let id;\n    try {\n      id = localStorage.getItem(KEY_SUBSCRIPTION_ID);\n      if (!id) {\n        id = sessionStorage.getItem(KEY_SUBSCRIPTION_ID);\n      }\n    } catch (error) {\n      log.warn('Failed getting subscription ID from storage', error);\n    }\n    if (!id && isPopupUnsubscribe()) {\n      const params = new URLSearchParams(location.search.slice(1));\n      if (params) {\n        id = params.get('subscriptionId');\n      }\n    }\n    return id;\n  }\n\n  setClickedNotification(id) {\n    try {\n      localStorage.setItem(KEY_NOTIFICATION_CLICKED, JSON.stringify({ id, date: Date.now() }));\n    } catch (error) {\n      log.info('failed saving notification to storage', error);\n    }\n  }\n\n  getClickedNotification(milliseconds = MILLIS_PER_HOUR) {\n    try {\n      const clickedNotif = localStorage.getItem(KEY_NOTIFICATION_CLICKED);\n      const clickedNotifObj = JSON.parse(clickedNotif);\n      if (\n        clickedNotifObj\n        && clickedNotifObj.id\n        && clickedNotifObj.date\n        && (parseInt(clickedNotifObj.date, INT_RADIX) + milliseconds) > Date.now()\n      ) {\n        return clickedNotifObj.id;\n      }\n    } catch (error) {\n      log.info('failed getting notification from storage', error);\n    }\n    return null;\n  }\n\n  getLastSession() {\n    let lastSessionStr;\n    try {\n      lastSessionStr = localStorage.getItem(KEY_LAST_SESSION);\n    } catch (error) {\n      log.info('failed getting sessions from storage', error);\n    }\n    let lastSession = {};\n    if (lastSessionStr) {\n      try {\n        lastSession = JSON.parse(lastSessionStr);\n      } catch (error) {\n        log.info('failed parsing last session from storage', error);\n      }\n    }\n    return lastSession;\n  }\n\n  setLastSession(lastSession) {\n    try {\n      localStorage.setItem(KEY_LAST_SESSION, JSON.stringify(lastSession));\n    } catch (error) {\n      log.info('failed saving last session to storage', error);\n    }\n  }\n\n  setSubscribed(subscriptionId, fromIframe) {\n    if (subscriptionId) {\n      localStorage.setItem(KEY_SUBSCRIPTION_ID, subscriptionId);\n\n      localStorage.setItem(KEY_DOMAIN, this.config.cleverpushDomain || DEFAULT_DOMAIN);\n\n      if (typeof fromIframe === 'undefined' || !fromIframe) {\n        localStorage.setItem(KEY_SUBSCRIPTION_STATUS, SUBSCRIPTION_STATUS.ALLOWED);\n      } else {\n        localStorage.removeItem(KEY_SUBSCRIPTION_STATUS);\n      }\n\n      this.initDb((db) => {\n        if (db) {\n          try {\n            const transaction = db.transaction([INDEXED_DB_TABLE_SUBSCRIPTION], INDEXED_DB_TRANSACTION_READWRITE);\n            const notificationsObjectStore = transaction.objectStore(INDEXED_DB_TABLE_SUBSCRIPTION);\n\n            const clearRequest = notificationsObjectStore.clear();\n            clearRequest.onsuccess = () => {\n              const putTransaction = db.transaction([INDEXED_DB_TABLE_SUBSCRIPTION], INDEXED_DB_TRANSACTION_READWRITE);\n              const putStore = putTransaction.objectStore(INDEXED_DB_TABLE_SUBSCRIPTION);\n              putStore.put({ id: subscriptionId, channelId: this.config.channelId });\n            };\n          } catch (error) {\n            log.info('setSubscribed db error', error);\n          }\n        }\n      });\n    }\n  }\n\n  getFacebookUserRef() {\n    try {\n      return localStorage.getItem(KEY_FACEBOOK_USER_REF);\n    } catch (error) {\n      log.info('failed getting facebook user ref', error);\n    }\n    return undefined;\n  }\n\n  setFacebookUserRef(userRef) {\n    if (userRef) {\n      localStorage.setItem(KEY_FACEBOOK_USER_REF, userRef);\n    }\n  }\n\n  setAllowed() {\n    localStorage.setItem(KEY_SUBSCRIPTION_STATUS, SUBSCRIPTION_STATUS.ALLOWED);\n    localStorage.removeItem(KEY_DENY_COUNT);\n  }\n\n  setPending() {\n    localStorage.setItem(KEY_SUBSCRIPTION_STATUS, SUBSCRIPTION_STATUS.PENDING);\n  }\n\n  setDenied() {\n    localStorage.setItem(KEY_DENY_TIME, Date.now());\n    localStorage.setItem(KEY_SUBSCRIPTION_STATUS, SUBSCRIPTION_STATUS.DENIED);\n    if (this.config.alertSessionsDeny > 0 || this.config.alertSessionsSecondDeny > 0) {\n      localStorage.setItem(KEY_DENY_SESSIONS, ZERO_STRING);\n      sessionStorage.setItem(KEY_DENY_SESSIONS_COUNTED, TRUE_STRING);\n    }\n\n    const hasDenyCountFilter = this.config.confirmAlertFilters?.find((filter) => filter.type === 'denyCountGreaterThan');\n    if (this.config.alertHoursSecondDeny || this.config.alertSessionsSecondDeny || hasDenyCountFilter) {\n      let denyCount = parseInt(localStorage.getItem(KEY_DENY_COUNT), INT_RADIX);\n      if (denyCount && !isNaN(denyCount)) {\n        denyCount += 1;\n        localStorage.setItem(KEY_DENY_COUNT, denyCount);\n      } else {\n        localStorage.setItem(KEY_DENY_COUNT, 1);\n      }\n    }\n  }\n\n  setClosed() {\n    localStorage.setItem(KEY_CLOSE_TIME, Date.now());\n\n    if (localStorage.getItem(KEY_SUBSCRIPTION_STATUS) === SUBSCRIPTION_STATUS.ALLOWED) {\n      return;\n    }\n\n    if (this.config.alertHoursClose > 0 || this.config.alertSessionsClose > 0) {\n      localStorage.setItem(KEY_SUBSCRIPTION_STATUS, SUBSCRIPTION_STATUS.DENIED);\n    } else {\n      localStorage.removeItem(KEY_SUBSCRIPTION_STATUS);\n    }\n\n    if (this.config.alertSessionsClose > 0) {\n      localStorage.setItem(KEY_CLOSE_SESSIONS, ZERO_STRING);\n      sessionStorage.setItem(KEY_CLOSE_SESSIONS_COUNTED, TRUE_STRING);\n    }\n  }\n\n  setUnsubscribed(notManually) {\n    localStorage.removeItem(KEY_SUBSCRIPTION_ID_OLD);\n    localStorage.removeItem(KEY_SUBSCRIPTION_ID);\n    localStorage.removeItem(KEY_LAST_SYNC);\n    localStorage.removeItem(KEY_LAST_SESSION);\n    localStorage.removeItem(KEY_LAST_WORKER_UPDATE);\n    localStorage.removeItem(KEY_LAST_WORKER_VERSION);\n    localStorage.removeItem(KEY_DOMAIN);\n    localStorage.removeItem(KEY_FACEBOOK_USER_REF);\n    localStorage.removeItem(KEY_TOPICS);\n    localStorage.removeItem(KEY_TOPICS_VERSION);\n    localStorage.removeItem(KEY_TAGS);\n    localStorage.removeItem(KEY_ATTRIBUTES);\n    localStorage.removeItem(KEY_VISITS);\n    localStorage.removeItem(KEY_PIANO_SEGMENTS_HASH);\n    sessionStorage.removeItem(KEY_SPEECHBUBBLE_UNREAD_NOTIFICATIONS);\n    if (!notManually) {\n      localStorage.setItem(KEY_SUBSCRIPTION_STATUS, SUBSCRIPTION_STATUS.UNSUBSCRIBED);\n      localStorage.setItem(KEY_DENY_TIME, Date.now());\n    }\n\n    Object.keys(localStorage).forEach((key) => {\n      if ((key && key.startsWith(KEY_TAG_PREFIX)) || key.startsWith(KEY_ATTRIBUTE_PREFIX)) {\n        localStorage.removeItem(key);\n      }\n    });\n\n    const specialLinks = document.querySelectorAll(\"a[href='#cleverpush-bell-speechbubble']\");\n    specialLinks.forEach((link) => {\n      if (link.classList.contains(KEY_HAS_UNREAD_NOTIFICATIONS)) {\n        link.classList.remove(KEY_HAS_UNREAD_NOTIFICATIONS);\n      }\n    });\n\n    if (this.db) {\n      try {\n        const transaction = this.db.transaction([INDEXED_DB_TABLE_SUBSCRIPTION], INDEXED_DB_TRANSACTION_READWRITE);\n        const subscriptionObjectStore = transaction.objectStore(INDEXED_DB_TABLE_SUBSCRIPTION);\n        subscriptionObjectStore.clear();\n      } catch (error) {\n        log.info('setUnsubscribed db error', error);\n      }\n    }\n  }\n\n  checkIfShouldSync() {\n    return new Promise((resolve) => {\n      try {\n        // sync when subscription id is empty\n        if (!this.getSubscriptionId()) {\n          resolve(true);\n          return;\n        }\n\n        let syncHours = SYNC_INTERVAL_HOURS;\n\n        const checkSyncViaInterval = () => {\n          const syncInterval = syncHours * MILLIS_PER_HOUR;\n\n          const lastSync = localStorage.getItem(KEY_LAST_SYNC);\n          if (!lastSync) {\n            resolve(true);\n          } else {\n            const lastSyncTime = parseInt(lastSync, INT_RADIX);\n            if (isNaN(lastSyncTime)) {\n              resolve(true);\n            } else {\n              resolve(lastSyncTime + syncInterval <= Date.now());\n            }\n          }\n        };\n\n        if (this.config.pianoEnabled && this.config.pianoPublicPersistedId) {\n          syncHours = SYNC_INTERVAL_HOURS_PIANO;\n\n          try {\n            const existingPianoHash = localStorage.getItem(KEY_PIANO_SEGMENTS_HASH);\n            getPianoSegmentsHash().then((pianoHash) => {\n              localStorage.setItem(KEY_PIANO_SEGMENTS_HASH, pianoHash);\n              log.debug('piano segments hashes - existing:', existingPianoHash, 'new:', pianoHash);\n              if (pianoHash !== existingPianoHash) {\n                resolve(true);\n              } else {\n                checkSyncViaInterval();\n              }\n            }).catch((pianoError) => {\n              log.debug('piano error', pianoError);\n              checkSyncViaInterval();\n            });\n          } catch (pianoError) {\n            log.debug('piano error', pianoError);\n            checkSyncViaInterval();\n          }\n        } else {\n          checkSyncViaInterval();\n        }\n      } catch (error) {\n        resolve(true);\n      }\n    });\n  }\n\n  setSynced() {\n    localStorage.setItem(KEY_LAST_SYNC, Date.now());\n  }\n\n  unsetSynced() {\n    localStorage.removeItem(KEY_LAST_SYNC);\n  }\n\n  checkIfShouldUpdateWorker() {\n    const currentVersion = typeof VERSION !== 'undefined' ? VERSION : '';\n    return new Promise((resolve) => {\n      try {\n        const lastSync = localStorage.getItem(KEY_LAST_WORKER_UPDATE);\n        const lastVersion = localStorage.getItem(KEY_LAST_WORKER_VERSION);\n        if (!lastSync) {\n          resolve(true);\n        } else if (currentVersion) {\n          // no time check here, just check if version of sdk updated (is similar to worker version)\n          resolve(lastVersion !== currentVersion);\n        } else {\n          const lastSyncTime = parseInt(lastSync, INT_RADIX);\n          if (isNaN(lastSyncTime)) {\n            resolve(true);\n          } else {\n            const syncInterval = UPDATE_WORKER_INTERVAL_24_HOURS * MILLIS_PER_HOUR;\n            resolve(lastSyncTime + syncInterval <= Date.now());\n          }\n        }\n      } catch (error) {\n        resolve(true);\n      }\n    });\n  }\n\n  setWorkerUpdated() {\n    localStorage.setItem(KEY_LAST_WORKER_UPDATE, Date.now());\n    localStorage.setItem(KEY_LAST_WORKER_VERSION, typeof VERSION !== 'undefined' ? VERSION : '');\n  }\n\n  getVisits() {\n    let storedVisits;\n    try {\n      storedVisits = localStorage.getItem(KEY_VISITS);\n    } catch (error) {\n      log.info('failed getting visits from storage', error);\n    }\n    let visits = 0;\n    if (storedVisits) {\n      visits = parseInt(storedVisits, INT_RADIX);\n      if (isNaN(visits)) {\n        visits = 0;\n      }\n    }\n    return visits;\n  }\n\n  incrementVisits() {\n    let visits = this.getVisits();\n    visits += 1;\n    localStorage.setItem(KEY_VISITS, visits);\n  }\n\n  setTopics(topics) {\n    log.debug('storageManager.setTopics', topics);\n\n    return new Promise((resolve) => {\n      if (topics && topics.length) {\n        localStorage.setItem(KEY_TOPICS, JSON.stringify(topics));\n      } else if (topics) {\n        localStorage.removeItem(KEY_TOPICS);\n      }\n      resolve(true);\n    });\n  }\n\n  getTopics() {\n    const topicsStr = localStorage.getItem(KEY_TOPICS);\n    if (!topicsStr) {\n      return Promise.resolve([]);\n    }\n    try {\n      const topics = JSON.parse(topicsStr);\n      return Promise.resolve(topics || []);\n    } catch (error) {\n      return Promise.resolve([]);\n    }\n  }\n\n  getTagDates() {\n    let tagDates = {};\n    if (localStorage.getItem(KEY_TAG_DATES)) {\n      try {\n        tagDates = JSON.parse(localStorage.getItem(KEY_TAG_DATES));\n      } catch (error) {\n        log.info('failed getting tag dates', error);\n      }\n    }\n    return tagDates;\n  }\n\n  getTagDate(id) {\n    const date = (this.getTagDates() || {})[id];\n    if (date) {\n      return new Date(date);\n    }\n    return null;\n  }\n\n  setTags(tags) {\n    return new Promise((resolve) => {\n      localStorage.setItem(KEY_TAGS, JSON.stringify(tags));\n\n      const tagDates = this.getTagDates() || {};\n      tags.forEach((tag) => {\n        tagDates[tag] = (new Date()).toISOString();\n      });\n      localStorage.setItem(KEY_TAG_DATES, JSON.stringify(tagDates));\n\n      resolve(true);\n    });\n  }\n\n  addTag(tag) {\n    return this.getTags().then((tags) => {\n      if (tags.indexOf(tag) < 0) {\n        tags.push(tag);\n      }\n      return this.setTags(tags);\n    });\n  }\n\n  removeTag(tag) {\n    return this.getTags().then((tags) => {\n      const tagIndex = tags.indexOf(tag);\n      if (tagIndex > -1) {\n        tags.splice(tagIndex, 1);\n        return this.setTags(tags);\n      }\n      return Promise.resolve();\n    });\n  }\n\n  getTags() {\n    const tagsStr = localStorage.getItem(KEY_TAGS);\n    if (!tagsStr) {\n      return Promise.resolve([]);\n    }\n    try {\n      const tags = JSON.parse(tagsStr);\n      return Promise.resolve(tags || []);\n    } catch (error) {\n      return Promise.resolve([]);\n    }\n  }\n\n  getAttribute(attributeId) {\n    try {\n      return Promise.resolve(localStorage.getItem(`cleverpush-attribute-${attributeId}`));\n    } catch (error) {\n      return Promise.resolve(null);\n    }\n  }\n\n  /**\n   * This function will return true if subscription has attributes from channel attributes\n   *\n   * @param {String} attribute Subscription Attribute id\n   * @returns {Promise<Boolean>}\n   */\n  hasAttribute(attributeId, value) {\n    return this.getAttribute(attributeId).then((storedValue) => Promise.resolve(storedValue === value));\n  }\n\n  hasTag(tag) {\n    return this.getTags().then((tags) => Promise.resolve(tags.indexOf(tag) > -1));\n  }\n\n  setTempBlocked() {\n    sessionStorage.setItem(KEY_SUBSCRIPTION_STATUS, SUBSCRIPTION_STATUS.DENIED);\n  }\n\n  setNotificationRead(notificationId) {\n    try {\n      const readNotifications = localStorage.getItem(KEY_READ_NOTIFICATIONS);\n      if (readNotifications) {\n        const notificationIds = JSON.parse(readNotifications) || [];\n        notificationIds.push(notificationId);\n        localStorage.setItem(KEY_READ_NOTIFICATIONS, JSON.stringify([...new Set(notificationIds)]));\n      } else {\n        const notificationIds = [];\n        notificationIds.push(notificationId);\n        localStorage.setItem(KEY_READ_NOTIFICATIONS, JSON.stringify(notificationIds));\n      }\n    } catch (error) {\n      log.info('failed to set reads notifications', error);\n    }\n  }\n\n  isNotificationRead(notificationId) {\n    try {\n      const readNotifications = localStorage.getItem(KEY_READ_NOTIFICATIONS);\n      if (readNotifications) {\n        const notificationIds = JSON.parse(readNotifications) || [];\n        return notificationIds.includes(notificationId);\n      }\n      return false;\n    } catch (error) {\n      log.info('failed to getting notifications', error);\n      return false;\n    }\n  }\n\n  checkUnreadNotifications(notifications) {\n    try {\n      const readNotifications = localStorage.getItem(KEY_READ_NOTIFICATIONS);\n      const notificationIds = JSON.parse(readNotifications || '[]') || [];\n      const checkUnread = notifications.some((item) => !notificationIds.includes(item._id));\n      const count = notifications.filter((item) => !notificationIds.includes(item._id)).length;\n      localStorage.setItem(KEY_UNREAD_NOTIFICATIONS_COUNT, count);\n      return checkUnread;\n    } catch (err) {\n      log.info('failed to check unread notifications');\n      return false;\n    }\n  }\n\n  deleteOldNotificationsIds(notifications) {\n    try {\n      const readNotifications = localStorage.getItem(KEY_READ_NOTIFICATIONS);\n      if (readNotifications) {\n        const notificationIds = JSON.parse(readNotifications) || [];\n        const newNotificationsIds = notificationIds.filter((item) => notifications.some((notification) => notification._id === item));\n        localStorage.setItem(KEY_READ_NOTIFICATIONS, JSON.stringify([...new Set(newNotificationsIds)]));\n      }\n    } catch (error) {\n      log.info('failed to delete notifications', error);\n    }\n  }\n}\n","import { log, logMethodCall } from '../utils/debug';\nimport { urlBase64ToUint8Array } from '../utils/https';\nimport StorageManager from '../storage/manager';\nimport Event from '../const/event';\nimport CleverPushError from '../error/CleverPushError';\nimport {\n  browser,\n  isPopup\n} from '../utils/env';\nimport { translate, charsetEscape, detectLanguage } from '../utils/translate';\n\nconst DB_NOTIFICATIONS_LIMIT = 100; // Same as in cleverpush-worker.js\n\nexport default class SubscriptionManager {\n  constructor(config, api, triggerEvent) {\n    this.config = config;\n    this.api = api;\n    this.triggerEvent = triggerEvent;\n    this.storageManager = new StorageManager(config);\n    this.subscribed = false;\n    this.initialTags = [];\n    // initially get sessionStorage from localStorage\n    try {\n      this.getTopics().then((topics) => this.topics = topics);\n    } catch (e) { }\n  }\n\n  // returns subscription (if subscribed) or false\n  isSubscribed() {\n    return new Promise((resolve) => {\n      if (this.config.env === 'PREVIEW') {\n        return resolve(false);\n      }\n\n      if (window.Notification.permission === 'granted' && navigator.serviceWorker) {\n        return this.getActiveWorkerRegistration().then((serviceWorkerRegistration) => serviceWorkerRegistration.pushManager.getSubscription().then((subscription) => {\n          if (!subscription) {\n            log.debug('manager subscribed = false (1)');\n            this.subscribed = false;\n            resolve(false);\n          } else {\n            return this.storageManager.isSubscribed().then((storageStatus) => {\n              log.debug(`manager subscribed = ${storageStatus} (2)`);\n              this.subscribed = storageStatus;\n              resolve(storageStatus);\n            });\n          }\n        })).catch((e) => {\n          if (e) {\n            log.error(e);\n            // Raven.captureException(e);\n          }\n          log.debug('manager subscribed = false (3)');\n          this.subscribed = false;\n          resolve(false);\n        });\n      }\n      log.debug('manager subscribed = false (4)');\n      this.subscribed = false;\n      resolve(false);\n    });\n  }\n\n  canSubscribe() {\n    return new Promise((resolve, reject) => {\n      this.storageManager.canSubscribe().then((canSubscribe) => {\n        if (canSubscribe) {\n          this.isSubscribed().then((isSubscribed) => {\n            if (isSubscribed) {\n              reject(new CleverPushError('User is already subscribed', 'subscribed'));\n            } else if (Notification.permission === 'denied') {\n              reject(new CleverPushError('User denied notifications', 'denied'));\n            } else {\n              resolve(true);\n            }\n          });\n        } else {\n          reject(new CleverPushError(`User has manually unsubscribed or denied notifications ${canSubscribe}`, 'unsubscribed'));\n        }\n      }).catch((err) => {\n        reject(err);\n      });\n    });\n  }\n\n  subscribe() {\n    // implemented in children\n  }\n\n  subscribeForce() {\n    this.subscribe();\n  }\n\n  hideUnsubscribeModal() {\n    this.unsubscribeModal.parentNode.removeChild(this.unsubscribeModal);\n    if (this.confirm) {\n      this.confirm.hideBackdrop();\n    }\n  }\n\n  showUnsubscribeFeedback() {\n    if (this.config.unsubscribeFeedbackDisabled) {\n      return;\n    }\n\n    const feedback = [];\n    if (this.config.optOutFeedbackAnswers && this.config.optOutFeedbackAnswers.length) {\n      this.config.optOutFeedbackAnswers.forEach((feedbackAnswer) => {\n        feedback.push({\n          title: feedbackAnswer.title,\n          id: feedbackAnswer.id,\n          icon: feedbackAnswer.icon\n        });\n      });\n      if (this.config.optOutFeedbackCustomText) {\n        feedback.push({ title: translate('unsubscribe.reasonOther'), id: 'other', icon: '' });\n      }\n    } else {\n      feedback.push(\n        { title: translate('unsubscribe.reasonQuantity'), id: 'quantity', icon: '' },\n        { title: translate('unsubscribe.reasonContent'), id: 'content', icon: '' },\n        { title: translate('unsubscribe.reasonOther'), id: 'other', icon: '' }\n      );\n    }\n    let configAlertLocalization = this.config.alertLocalization || {};\n    const language = detectLanguage(this.config || {});\n    if (this.config.alertLocalizationTranslations && language && this.config.alertLocalizationTranslations[language]) {\n      configAlertLocalization = { ...configAlertLocalization, ...this.config.alertLocalizationTranslations[language] };\n    }\n\n    const closeButtonHtml = this.config.confirmAlertCloseButton ? '<button type=\"button\" class=\"cleverpush-confirm-hide\">&times;</button>' : '';\n\n    this.unsubscribeModal = document.createElement('div');\n    this.unsubscribeModal.className = 'cleverpush-confirm cleverpush-confirm-default cleverpush-uf-box';\n    this.unsubscribeModal.innerHTML = `${closeButtonHtml}\n<div class=\"cleverpush-confirm-caret cleverpush-confirm-caret-top\" style=\"display: none; border-bottom-color: ${this.config.confirmAlertThemeBackgroundColor}\"></div>\n<div class=\"cleverpush-confirm-icon\"><img src=\"${this.config.channelIcon}\"></div>\n<div class=\"cleverpush-confirm-text\">\n  <span class=\"cleverpush-confirm-title\">${charsetEscape(configAlertLocalization.optOutFeedbackTitle) || translate('unsubscribe.feedback')}</span>\n</div>\n<div style=\"margin-top: 10px; margin-bottom: 5px; padding-top: 10px;\">\n${feedback.map((f) => `<button type=\"button\" class=\"cleverpush-confirm-btn cleverpush-uf-button\" style=\"text-transform: none; margin-bottom: 10px !important;\" data-reason=\"${f.id}\">${f.icon ? `<img src=${f.icon} style=\"margin-right: 10px; float: left;\" width=\"25\" heigh=\"25\">` : ''}${f.title}</button>`).join('')}\n<button type=\"button\" class=\"cleverpush-confirm-btn cleverpush-confirm-btn-allow cleverpush-uf-button\" data-re-allow=\"true\" style=\"display: none;\">${translate('bell.subscribe')}</button>\n</div>\n`;\n    document.body.appendChild(this.unsubscribeModal);\n\n    if (this.confirm) {\n      this.confirm.showBackdrop();\n    }\n\n    const closeButton = this.unsubscribeModal.querySelector('.cleverpush-confirm-hide');\n    if (closeButton) {\n      closeButton.addEventListener('click', () => this.hideUnsubscribeModal());\n      if (this.confirmBox && typeof this.config.confirmAlertStyle === 'object' && this.config.confirmAlertStyle.color) {\n        closeButton.style.color = this.config.confirmAlertStyle.color;\n      }\n    }\n\n    const buttons = this.unsubscribeModal.querySelectorAll('.cleverpush-confirm-btn');\n    for (let i = 0; i < buttons.length; i += 1) {\n      const button = buttons[i];\n      button.addEventListener('click', (e) => {\n        e.preventDefault();\n        if (e.currentTarget.dataset.reAllow === 'true') {\n          this.hideUnsubscribeModal();\n          this.subscribe();\n        } else if (e.currentTarget.dataset.reason === 'other' && this.config.optOutFeedbackCustomText) {\n          this.showCustomText(this.unsubscribeModal);\n        } else {\n          this.api.unsubscribeFeedback(e.currentTarget.dataset.reason);\n          this.hideUnsubscribeModal();\n        }\n      });\n    }\n  }\n\n  showCustomText(modal) {\n    modal.innerHTML = `\n    <div class=\"cleverpush-confirm-icon\"><img src=\"${this.config.channelIcon}\"></div>\n    <div class=\"cleverpush-confirm-text\">\n      <span class=\"cleverpush-confirm-title\">${translate('unsubscribe.enterReason')}</span>\n    </div>\n    <div style=\"margin-top: 10px; margin-bottom: 5px;\">\n      <div style=\"text-align: center; padding: 12px;\">\n        <textarea style=\"width: 100%; margin-bottom: 10px;\"></textarea>\n        <button type=\"button\" class=\"cleverpush-confirm-btn cleverpush-uf-button\" style=\"text-transform: none;, margin-bottom: 10px !important;\" data-reason=\"other\">${translate('unsubscribe.submit')}</button>\n      </div>\n    </div>\n    `;\n    const button = modal.querySelector('.cleverpush-confirm-btn');\n    button.addEventListener('click', (e) => {\n      e.preventDefault();\n      const text = modal.querySelector('textarea').value;\n      this.api.unsubscribeFeedback(e.currentTarget.dataset.reason, text);\n      modal.parentNode.removeChild(modal);\n    });\n  }\n\n  unsubscribe(notManually, alreadyUnsubscribedId) {\n    const removeBrowserSubscription = () => {\n      this.storageManager.setUnsubscribed(notManually);\n      this.topics = [];\n      this.triggerEvent(Event.UNSUBSCRIBED);\n\n      if (!navigator.serviceWorker) {\n        return Promise.resolve();\n      }\n\n      return this.getActiveWorkerRegistration()\n        .then((registration) => {\n          if (!registration.pushManager) {\n            return Promise.resolve();\n          }\n          registration.pushManager.getSubscription().then((subscription) => {\n            if (subscription) {\n              return subscription.unsubscribe().then(() => registration.unregister());\n            }\n            return Promise.resolve();\n          });\n        });\n    };\n\n    const subscriptionId = this.storageManager.getSubscriptionId();\n    if (subscriptionId && (typeof alreadyUnsubscribedId === 'undefined' || alreadyUnsubscribedId !== subscriptionId)) {\n      return this.api.unsubscribe(subscriptionId).then(() => removeBrowserSubscription().then(() => {\n        this.showUnsubscribeFeedback();\n        return Promise.resolve();\n      }));\n    }\n    return removeBrowserSubscription().then(() => {\n      this.showUnsubscribeFeedback();\n      return Promise.resolve();\n    });\n  }\n\n  getWorkerPath() {\n    if (isPopup() && !(this.config.popupCustomDomainEnabled && this.config.popupDomain)) {\n      return '/cleverpush-worker.js';\n    }\n    return this.config.serviceWorkerFile || '/worker.js';\n  }\n\n  getWorkerScope() {\n    let workerPath = this.getWorkerPath();\n    if (workerPath.indexOf('?') > -1) {\n      workerPath = workerPath.split('?')[0];\n    }\n    return workerPath.substr(0, workerPath.lastIndexOf('/') + 1) || '/';\n  }\n\n  getServiceWorker(registration) {\n    return registration.active || registration.waiting || registration.installing;\n  }\n\n  getActiveWorkerRegistration() {\n    return new Promise((resolve, reject) => {\n      if (!navigator.serviceWorker) {\n        log.debug('worker: getActiveWorkerRegistration: !navigator.serviceWorker');\n        reject();\n      } else if (navigator.serviceWorker.getRegistration) {\n        const workerScope = this.getWorkerScope();\n        const workerPath = this.config.serviceWorkerFile;\n        navigator.serviceWorker.getRegistration(workerScope).then((registration) => {\n          if (registration && this.getServiceWorker(registration) && (!workerPath || !this.getServiceWorker(registration).scriptURL || this.getServiceWorker(registration).scriptURL.indexOf(workerPath) > -1)) {\n            resolve(registration);\n          } else if (typeof navigator.serviceWorker.getRegistrations === 'function') {\n            navigator.serviceWorker.getRegistrations().then((registrations) => {\n              let found = false;\n              (registrations || []).forEach((scopeRegistration) => {\n                if (!found) {\n                  if (scopeRegistration && this.getServiceWorker(scopeRegistration) && (!workerPath || !this.getServiceWorker(scopeRegistration).scriptURL || this.getServiceWorker(scopeRegistration).scriptURL.indexOf(workerPath) > -1)) {\n                    found = true;\n                    resolve(scopeRegistration);\n                  } else {\n                    log.debug('worker: getActiveWorkerRegistration:', scopeRegistration, this.getServiceWorker(scopeRegistration));\n                  }\n                }\n              });\n              if (!found) {\n                log.debug('worker: getActiveWorkerRegistration: !found');\n                reject();\n              }\n            }).catch(reject);\n          } else if (navigator.serviceWorker.controller) {\n            log.debug('worker: getActiveWorkerRegistration: waiting for worker to be ready');\n            navigator.serviceWorker.ready.then(resolve).catch(reject);\n          } else {\n            log.debug('worker: getActiveWorkerRegistration: last reject 1');\n            reject();\n          }\n        }).catch(reject);\n      } else if (navigator.serviceWorker.controller) {\n        log.debug('worker: getActiveWorkerRegistration: waiting for worker to be ready');\n        navigator.serviceWorker.ready.then(resolve).catch(reject);\n      } else {\n        log.debug('worker: getActiveWorkerRegistration: last reject 2');\n        reject();\n      }\n    });\n  }\n\n  registerWorker() {\n    return new Promise((resolve, reject) => {\n      log.debug('registering worker');\n\n      const registerNewWorker = () => {\n        const workerPath = this.getWorkerPath();\n        const workerScope = this.getWorkerScope();\n\n        navigator.serviceWorker.register(workerPath, { scope: workerScope, updateViaCache: 'none' }).then((serviceWorkerRegistration) => {\n          log.debug('worker registered', serviceWorkerRegistration);\n\n          if (serviceWorkerRegistration.active) {\n            log.debug('worker is active');\n            resolve(serviceWorkerRegistration);\n          } else if (serviceWorkerRegistration.installing) {\n            log.debug('worker is installing');\n\n            serviceWorkerRegistration.installing.addEventListener('statechange', (e) => {\n              log.debug('worker: onstatechange', e.target.state);\n              if (e.target.state === 'activated') {\n                resolve(serviceWorkerRegistration);\n              }\n              /*\n              const sw = e.target;\n              log.debug('swInstallationStateChanged: ' + sw.state);\n\n                // is any sw already installed? This function will run 'before' 'SW's activate' handler, so we are checking for any previous sw, not this one.\n                if (navigator.serviceWorker.controller) {\n                  console.log('Content has updated!');\n                } else {\n                  console.log('Content is now available offline!');\n                }\n              } else if (sw.state === 'activated') {\n              }\n              */\n            });\n          } else if (serviceWorkerRegistration.waiting) {\n            log.debug('worker is waiting');\n            serviceWorkerRegistration.installing.addEventListener('statechange', (e) => {\n              log.debug('worker: onstatechange', e.target.state);\n              if (e.target.state === 'activated') {\n                resolve(serviceWorkerRegistration);\n              }\n            });\n          } else {\n            log.debug('worker: getActiveWorkerRegistration');\n            this.getActiveWorkerRegistration().then(resolve).catch(reject);\n          }\n\n          // resolve(serviceWorkerRegistration);\n        }).catch((err) => {\n          log.error('error registering worker', err);\n          // Raven.captureException(err);\n          reject(err);\n        });\n      };\n\n      this.getActiveWorkerRegistration().then((currentWorkerRegistration) => {\n        if (!currentWorkerRegistration || !currentWorkerRegistration.active) {\n          registerNewWorker();\n        } else {\n          log.debug('worker was already registered', currentWorkerRegistration);\n          resolve(currentWorkerRegistration);\n        }\n      }).catch(registerNewWorker);\n    });\n  }\n\n  unregisterOtherPushSubscriptions(cleverpushRegistration) {\n    logMethodCall('unregisterOtherPushSubscriptions', cleverpushRegistration.scriptURL);\n    // unregister all other push subscriptions\n    if (this.config.importedSubscriptionsProvider && typeof navigator.serviceWorker.getRegistrations === 'function') {\n      navigator.serviceWorker.getRegistrations().then((registrations) => {\n        (registrations || []).forEach((scopeRegistration) => {\n          if (this.getServiceWorker(scopeRegistration) && this.getServiceWorker(scopeRegistration).scriptURL !== cleverpushRegistration.scriptURL && this.getServiceWorker(scopeRegistration).scriptURL && this.getServiceWorker(scopeRegistration).scriptURL.indexOf(this.config.serviceWorkerFile) < 0 && this.getServiceWorker(scopeRegistration).scriptURL.indexOf('cleverpush') < 0) {\n            scopeRegistration.pushManager.getSubscription().then((subscription) => {\n              log.debug('unsubscribing:', subscription);\n              if (subscription) {\n                subscription.unsubscribe();\n                this.migratedSubscription = true;\n              }\n            });\n          }\n        });\n      });\n    }\n  }\n\n  tryWorkerUpdate(serviceWorkerRegistration) {\n    if (this.tryWorkerUpdateCalled) {\n      return;\n    }\n    this.tryWorkerUpdateCalled = true;\n\n    logMethodCall('tryWorkerUpdate', serviceWorkerRegistration);\n\n    // updates SW every 6h\n    this.storageManager.checkIfShouldUpdateWorker().then((shouldUpdate) => {\n      if (serviceWorkerRegistration && shouldUpdate) {\n        log.debug('updating worker now');\n        serviceWorkerRegistration.update();\n        this.storageManager.setWorkerUpdated();\n      }\n    });\n\n    if (!this.unregisterOtherPushSubscriptionsCalled) {\n      this.unregisterOtherPushSubscriptionsCalled = true;\n      this.unregisterOtherPushSubscriptions(serviceWorkerRegistration);\n    }\n  }\n\n  sync(subscriptionParam, topicsParam) {\n    logMethodCall('sync', subscriptionParam);\n\n    const topics = typeof topicsParam !== 'undefined' ? topicsParam : this.topics;\n\n    return new Promise((resolve) => {\n      if (this.syncInProgress) {\n        log.debug('sync: resolved because syncInProgress was true');\n        resolve();\n        return;\n      }\n      this.syncInProgress = true;\n\n      let subscription = subscriptionParam;\n\n      this.getSubscriptionId().then((subscriptionIdParam) => {\n        const doSync = () => {\n          const syncParams = {};\n          if (subscriptionIdParam) {\n            // TODO: this should be useless as subscription id is given via subscription param\n            syncParams.subscriptionId = subscriptionIdParam;\n          }\n          if (this.existingPermission) {\n            syncParams.existingPermission = true;\n          }\n          if (this.isReSubscribe) {\n            syncParams.isReSubscribe = true;\n          }\n          if (this.migratedSubscription) {\n            syncParams.migratedSubscription = true;\n          }\n\n          this.api.syncSubscription(subscription, topics, this.initialTags, syncParams).then((res) => {\n            const subscriptionId = res.id;\n\n            if ((this.initialTags || []).length) {\n              this.storageManager.setTags(this.initialTags);\n            }\n\n            this.initialTags = [];\n\n            this.storageManager.setSubscribed(subscriptionId);\n            if (this.iframeMessenger) {\n              this.iframeMessenger.setSubscribed(subscriptionId);\n            }\n            this.storageManager.setSynced();\n\n            if ((res.topics || []).length) {\n              this.storageManager.setTopics(res.topics);\n            }\n            if (res.topics) {\n              this.triggerEvent(Event.TOPICS_SET);\n            }\n\n            if (res.topicsVersion) {\n              try {\n                localStorage.setItem('cleverpush-topics-version', `${res.topicsVersion}`);\n              } catch (ignored) { }\n            }\n\n            if (this.config.channelTags && this.config.channelTags.length && !this.existingPermission && !syncParams.subscriptionId) {\n              this.config.channelTags.forEach((tag) => {\n                if (tag.autoAssignOptInPath && new RegExp(tag.autoAssignOptInPath).test(location.pathname)) {\n                  CleverPush.tagSubscription(tag._id);\n                }\n              });\n            }\n\n            this.syncInProgress = false;\n            resolve();\n          }).catch((err) => {\n            if (typeof err !== 'undefined') {\n              if (err === 404) {\n                // consider this unsubscription as \"not manually\" so we can opt-in again\n                this.storageManager.setUnsubscribed(true);\n                if (this.iframeMessenger) {\n                  this.iframeMessenger.setUnsubscribed(true);\n                }\n\n                // retry to re-subscribe after 404\n                this.hasNotificationPermission((hasPermission) => {\n                  if (hasPermission) {\n                    this.subscribe();\n                  }\n                });\n              } else {\n                log.error(err);\n                // Raven.captureException(err);\n              }\n            } else {\n              log.error('Unknown Error occured while syncing');\n            }\n\n            this.syncInProgress = false;\n            resolve();\n          });\n        };\n\n        if (typeof subscription !== 'undefined' && subscription) {\n          doSync();\n        } else {\n          subscription = subscriptionIdParam;\n          if (subscription) {\n            doSync();\n          } else {\n            this.syncInProgress = false;\n            resolve();\n          }\n        }\n      }).catch((err) => {\n        this.syncInProgress = false;\n      });\n    });\n  }\n\n  getSubscriptionId() {\n    const subId = this.storageManager.getSubscriptionId();\n    if (subId) {\n      log.debug('subscriptionId', subId);\n    } else {\n      log.debug('subscriptionId not found');\n    }\n    return Promise.resolve(subId);\n  }\n\n  hasNotificationPermission() {\n    if (this.config.env === 'PREVIEW') {\n      return Promise.resolve(false);\n    }\n    return Promise.resolve(window.Notification.permission === 'granted');\n  }\n\n  getNotificationPermission(force) {\n    try {\n      if (browser.name === 'Firefox' && sessionStorage.getItem('cleverpush-subscription-status') === 'denied' && typeof force === 'undefined') {\n        return 'denied';\n      }\n    } catch (err) { }\n    return window.Notification.permission;\n  }\n\n  setConfirm(confirm) {\n    this.confirm = confirm;\n  }\n\n  setTopics(topics) {\n    log.debug('setTopics', topics);\n\n    this.topics = topics;\n    return this.storageManager.setTopics(topics);\n  }\n\n  getTopics() {\n    return this.storageManager.getTopics();\n  }\n\n  getTags() {\n    return this.storageManager.getTags();\n  }\n\n  hasNotificationsStoredInBrowserDb() {\n    return this.storageManager.hasNotificationsStoredInBrowserDb();\n  }\n\n  getDeliveredNotifications() {\n    return this.storageManager.getNotifications(DB_NOTIFICATIONS_LIMIT);\n  }\n\n  async getStoredNotifications() {\n    let path = `/channel/${this.api.channelId}/received-notifications`;\n    const subscriptionId = await this.getSubscriptionId();\n    if (subscriptionId) {\n      path += `?subscriptionId=${subscriptionId}`;\n    }\n\n    try {\n      const topics = await this.getTopics();\n      const tags = await this.getTags();\n\n      if (topics && topics.length) {\n        path += `${path.includes('?') ? '&' : '?'}${[...new Set(topics)].sort().map((topic) => `topics[]=${topic}`).join('&')}`;\n      }\n\n      if (tags && tags.length) {\n        path += `${path.includes('?') ? '&' : '?'}${[...new Set(tags)].sort().map((tag) => `tags[]=${tag}`).join('&')}`;\n      }\n\n      const response = await this.api.request('GET', path);\n      if (response && response.notifications) {\n        return response.notifications\n          .filter((notification) => notification.createdAt)\n          .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))\n          .map((n) => ({\n            ...n,\n            title: n.title || (n.testVariants && n.testVariants.length && n.testVariants[0] ? n.testVariants[0].title : ''),\n            text: n.text || (n.testVariants && n.testVariants.length && n.testVariants[0] ? n.testVariants[0].text : ''),\n            mediaUrl: n.mediaUrl || (n.testVariants && n.testVariants.length && n.testVariants[0] ? n.testVariants[0].mediaUrl : ''),\n            url: n.url || (n.testVariants && n.testVariants.length && n.testVariants[0] ? n.testVariants[0].url : '')\n          }));\n      }\n      return [];\n    } catch (error) {\n      console.error(error);\n      return [];\n    }\n  }\n\n  deleteStoredNotification(id) {\n    return new Promise((resolve, reject) => {\n      if (!this.storageManager.db) {\n        resolve();\n      } else {\n        this.storageManager.deleteNotification(id).then(() => {\n          resolve();\n        }).catch((err) => {\n          reject(err);\n        });\n      }\n    });\n  }\n\n  getPushManagerSubscribeOptions() {\n    const subscribeOptions = {\n      userVisibleOnly: true\n    };\n\n    if (this.config.vapidPublicKey && this.config.vapidPublicKey.length) {\n      const vapidPublicKey = urlBase64ToUint8Array(this.config.vapidPublicKey);\n      if (vapidPublicKey) {\n        subscribeOptions.applicationServerKey = vapidPublicKey;\n      }\n    }\n\n    return subscribeOptions;\n  }\n\n  setClickedNotification(id) {\n    this.storageManager.setClickedNotification(id);\n    return Promise.resolve();\n  }\n\n  getClickedNotification() {\n    return new Promise((resolve) => {\n      resolve(this.storageManager.getClickedNotification());\n    });\n  }\n}\n","export function urlBase64ToUint8Array(base64String) {\n  const padding = '='.repeat((4 - base64String.length % 4) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n"],"sourceRoot":""}